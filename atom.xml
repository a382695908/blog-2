<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Video.js Blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://videojs.github.io/blog/"/>
  <updated>2016-06-29T20:23:06.000Z</updated>
  <id>https://videojs.github.io/blog/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Video.js 5&#39;s fluid mode and playlist picker</title>
    <link href="https://videojs.github.io/blog/Video-js-5-s-fluid-mode-and-playlist-picker/"/>
    <id>https://videojs.github.io/blog/Video-js-5-s-fluid-mode-and-playlist-picker/</id>
    <published>2016-06-01T18:50:06.000Z</published>
    <updated>2016-06-29T20:23:06.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;How-it-works&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#How-it-works&quot; class=&quot;headerlink&quot; title=&quot;How it works&quot;&gt;&lt;/a&gt;How it works&lt;/h2&gt;&lt;p&gt;In video.js 5.0, we added support for truly fluid layouts with video.js.&lt;br&gt;You can see an example of it on the &lt;a href=&quot;//videojs.com&quot;&gt;video.js website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is done by using &lt;a href=&quot;http://alistapart.com/article/creating-intrinsic-ratios-for-video&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;intrinsic ratios&lt;/a&gt;. Video.js does the heavy lifting for you.&lt;/p&gt;
&lt;h2 id=&quot;How-to-use-it-in-video-js&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#How-to-use-it-in-video-js&quot; class=&quot;headerlink&quot; title=&quot;How to use it in video.js&quot;&gt;&lt;/a&gt;How to use it in video.js&lt;/h2&gt;&lt;p&gt;In video.js, to make a player fluid, you can either set the &lt;code&gt;fluid&lt;/code&gt; option&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; player = videojs(&lt;span class=&quot;string&quot;&gt;&#39;preview-player&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  fluid: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Or you can add one of the fluid classes to the player: &lt;code&gt;.vjs-fluid&lt;/code&gt;, &lt;code&gt;.vjs-4-3&lt;/code&gt;, &lt;code&gt;.vjs-16-9&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;preview-player&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;video-js vjs-fluid&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-setup&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.vjs-4-3&lt;/code&gt; maintains a 4:3 aspect ratio for the video and &lt;code&gt;.vjs-16-9&lt;/code&gt; maintains a 16:9 one.  &lt;code&gt;.vjs-fluid&lt;/code&gt; is a bit more special. It waits for the video metadata to load and then uses the video width and video height to calculate the correct aspect ratio to use for the video.&lt;/p&gt;
&lt;h2 id=&quot;Playlist-picker&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#Playlist-picker&quot; class=&quot;headerlink&quot; title=&quot;Playlist picker&quot;&gt;&lt;/a&gt;Playlist picker&lt;/h2&gt;&lt;p&gt;This works great if you only have the player by itself. What if you are trying to a attach a playlist to the video element and keep it at the same height Like we did on the &lt;a href=&quot;//videojs.com/advanced/&quot;&gt;advanced example page&lt;/a&gt; on the video.js website?&lt;br&gt;&lt;img src=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/videojs-with-playlist.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; calculate how much the padding top should be depending on the width of the playlist picker or the container element but then each time a video changes we would need to recalculate the height of the playlist picker. Instead, we can rely on video.js to do all the work.&lt;/p&gt;
&lt;h3 id=&quot;Attaching-the-playlist-picker&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#Attaching-the-playlist-picker&quot; class=&quot;headerlink&quot; title=&quot;Attaching the playlist picker&quot;&gt;&lt;/a&gt;Attaching the playlist picker&lt;/h3&gt;&lt;p&gt;For this example, We’re using the &lt;a href=&quot;https://github.com/brightcove/videojs-playlist-ui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-playlist-ui&lt;/a&gt; and &lt;a href=&quot;https://github.com/brightcove/videojs-playlist&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-playlist&lt;/a&gt; plugins for the playlist functionality.&lt;br&gt;We then wrap the player in a container and put the playlist-ui element in there as well.&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main-preview-player&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;preview-player&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;video-js vjs-fluid&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;preload&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;crossorigin&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vjs-no-js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;To view this video please enable JavaScript, and consider upgrading to a web browser that &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://videojs.com/html5-video-support/&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;supports HTML5 video&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vjs-playlist&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now we can relatively quickly make them align together with some CSS:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.video-js&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;70%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.vjs-playlist&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/videojs-playlist-not-fluid.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;How-to-make-it-fluid&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#How-to-make-it-fluid&quot; class=&quot;headerlink&quot; title=&quot;How to make it fluid&quot;&gt;&lt;/a&gt;How to make it fluid&lt;/h3&gt;&lt;p&gt;As you can see in the preceeding screenshot, it isn’t aligned correctly with the player like in the screenshot above.&lt;br&gt;Video.js calculates the aspect ratio and then adds a stylesheet to the page:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.preview-player-dimensions&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.vjs-fluid&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;padding-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;41.66666666666667%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That percentage results in a 2.4 aspect ratio which matches that of the oceans clip.&lt;/p&gt;
&lt;p&gt;So, to make sure that the playlist picker is the same height, we can just add the player dimensions class to it:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vjs-playlist preview-player-dimensions vjs-fluid&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;How-to-make-it-line-up&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#How-to-make-it-line-up&quot; class=&quot;headerlink&quot; title=&quot;How to make it line up&quot;&gt;&lt;/a&gt;How to make it line up&lt;/h3&gt;&lt;p&gt;One of the easiest ways of making these two things line up correctly is to use flexbox. It’ll make the player and playlist picker grow to fill up as much space as needed. Also, the playlist picker collapse underneath the player if the width of the page is too small.&lt;br&gt;Flexbox is &lt;a href=&quot;http://caniuse.com/#feat=flexbox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;available&lt;/a&gt; on a lot of platforms. However, some browsers were implementing flexbox as the specification for it was evolving. It’s probably best to run this css through something like &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autoprefixer&lt;/a&gt;. Using autoprefixer won’t make it work on browsers that don’t support flexbox but will significantly increase platform support.&lt;/p&gt;
&lt;p&gt;First, we set &lt;code&gt;display&lt;/code&gt; to &lt;code&gt;flex&lt;/code&gt; and add some properties for wrapping and sizing:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.main-preview-player&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex-wrap&lt;/span&gt;: wrap;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: space-between;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-wrap&lt;/code&gt; allows playlist picker to wrap to the next line if the width of the container is too small.&lt;br&gt;Then we want to position the player and playlist picker relative to the container and set some default and minimum sizes:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.video-js&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.vjs-playlist&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;150px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And finally, we want to apply the flex setting to the player and playlist picker:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.video-js&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;70%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.vjs-playlist&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This tells the player to grow and take up 3x the space as the playlist picker and defaults to 70% of the width. The playlist picker itself defaults to 30% of the width and is allowed to grow and shrink as necessary.&lt;br&gt;Now if we load this in a browser we see a problem. The playlist isn’t the right height:&lt;br&gt;&lt;img src=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/videojs-playlist-small.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;This is because the playlist-ui plugin sets its own padding on the element that ends up overriding the &lt;code&gt;preview-player-dimensions&lt;/code&gt; &lt;code&gt;padding-top&lt;/code&gt;. We can fix this by forcing the &lt;code&gt;padding-top&lt;/code&gt; we want. However, while this solves our height problem, where are our items? Oh, you need to scroll to get them. That seems less than ideal.&lt;br&gt;&lt;img src=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/videojs-playlist-padding.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;This happens because our &lt;code&gt;padding-top&lt;/code&gt; is inside the playlist picker; it pushed all the elements down requiring scrolling to get to them.&lt;/p&gt;
&lt;h3 id=&quot;The-final-solution&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#The-final-solution&quot; class=&quot;headerlink&quot; title=&quot;The final solution&quot;&gt;&lt;/a&gt;The final solution&lt;/h3&gt;&lt;p&gt;Ultimately, what we need to do is wrap the playlist element in a container that flexes so that the &lt;code&gt;padding-top&lt;/code&gt; doesn’t push the playlist items down.&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;playlist-container  preview-player-dimensions vjs-fluid&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vjs-playlist&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We also change the &lt;code&gt;vjs-playlist&lt;/code&gt; references to &lt;code&gt;playlist-container&lt;/code&gt; and absolutely position the playlist picker inside its container:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.playlist-container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;150px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.playlist-container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.vjs-playlist&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now we have what we were looking for:&lt;br&gt;&lt;img src=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/videojs-with-playlist.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;All-together-now&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#All-together-now&quot; class=&quot;headerlink&quot; title=&quot;All together now&quot;&gt;&lt;/a&gt;All together now&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/responsive-playlist.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;The HTML:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main-preview-player&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;preview-player&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;video-js vjs-fluid&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;preload&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;crossorigin&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vjs-no-js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;To view this video please enable JavaScript, and consider upgrading to a web browser that &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://videojs.com/html5-video-support/&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;supports HTML5 video&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;playlist-container  preview-player-dimensions vjs-fluid&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vjs-playlist&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And the CSS:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.main-preview-player&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex-wrap&lt;/span&gt;: wrap;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: space-between;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.video-js&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.playlist-container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;150px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.video-js&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;70%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.playlist-container&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.vjs-playlist&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;How-it-works&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-s-fluid-mode-and-playlist-picker/#How-it-works&quot; class=&quot;headerlink&quot; title=&quot;How it works&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="videojs 5" scheme="https://videojs.github.io/blog/tags/videojs-5/"/>
    
      <category term="fluid" scheme="https://videojs.github.io/blog/tags/fluid/"/>
    
  </entry>
  
  <entry>
    <title>Video.js 5: The Only Thing That’s Changed Is Everything...except for like 3 things that didn&#39;t (including the name).</title>
    <link href="https://videojs.github.io/blog/Video-js-5-The-Only-Thing-That%E2%80%99s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/"/>
    <id>https://videojs.github.io/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/</id>
    <published>2015-09-29T18:00:16.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;First and foremost, &lt;strong&gt;THANK YOU&lt;/strong&gt; to the 25 contributors who completed and merged &lt;strong&gt;146 pull requests&lt;/strong&gt; and updated just about every line of code in the project. And thank you to the hundreds of issue commenters and plugin authors who helped shape this latest version. For a widget, we’ve got a pretty awesome community.&lt;/p&gt;
&lt;p&gt;For 5.0 we have some interesting new features, and we made A LOT of new technology choices. This will include an exhaustive dive into those choices, because… why not?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redesigned and rebuilt the UI&lt;ul&gt;
&lt;li&gt;Using a flex-box-based controls layout for easier add-ons&lt;/li&gt;
&lt;li&gt;Improved accessibility of the controls&lt;/li&gt;
&lt;li&gt;Switched from LESS to SASS&lt;/li&gt;
&lt;li&gt;Switched to Material Icons&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rebuilt the library in ES6/Babel/Browserify including Modules and Classes&lt;/li&gt;
&lt;li&gt;Added support for responsive layouts including auto-sizing to the video content&lt;/li&gt;
&lt;li&gt;Added support for HLS in desktop browsers &lt;strong&gt;without Flash&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Improved audio-only support&lt;/li&gt;
&lt;li&gt;Added 6 more language translations bringing the total to 25&lt;/li&gt;
&lt;li&gt;Switched from Closure Compiler to UglifyJS (we STOPPED mangling object properties)&lt;/li&gt;
&lt;li&gt;Switched to JSDoc for documentation&lt;/li&gt;
&lt;li&gt;Switched to BrowserStack for automated browser testing&lt;/li&gt;
&lt;li&gt;Switched to Fastly for our CDN&lt;/li&gt;
&lt;li&gt;New definition around plugins&lt;/li&gt;
&lt;li&gt;New &lt;a href=&quot;http://codepen.io/heff/pen/EarCt/left/?editors=010&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;player skin designer&lt;/a&gt; on Codepen&lt;/li&gt;
&lt;li&gt;New definition around playback technologies (“techs”)&lt;/li&gt;
&lt;li&gt;New project governance model&lt;/li&gt;
&lt;li&gt;New Website and Logo!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re a Video.js user or lover of &lt;a href=&quot;http://semver.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semver&lt;/a&gt;, you’re probably looking at the &lt;a href=&quot;https://github.com/videojs/video.js/blob/872459837b21c1e3d05fa86df4022f5a2b17ea1c/CHANGELOG.md#500-2015-09-29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;changelog&lt;/a&gt; and dying inside (or out). You’re probably already thinking about how little you want to do the mega-upgrade dance every time the major version is bumped. To be clear, there will be at least &lt;em&gt;some&lt;/em&gt; upgrade cost between major versions because that’s just how things go. &lt;strong&gt;However&lt;/strong&gt;, from 5.0 on, we plan on being a lot more liberal with major versions to avoid stop-the-world mega releases like this.&lt;/p&gt;
&lt;p&gt;The fact is, this release &lt;a href=&quot;https://github.com/videojs/video.js/wiki/5.0-Change-Details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cleaned up a lot of technical debt&lt;/a&gt; and cruft over years of maintaining a popular open source library. Working with the codebase is fun again (not like it wasn’t before, Judgy McJudgerson) and we think we’ve bought ourselves at least 6 months before we have to upgrade to ES9000. In all seriousness, we plan on being quicker with releases, both breaking and non, in order to make incremental upgrades less painful and, well, quicker. Besides, Chrome and Firefox are going to be in the thousands soon for their releases, and we want some of that fun.&lt;/p&gt;
&lt;h2 id=&quot;Redesigned-and-rebuilt-UI&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Redesigned-and-rebuilt-UI&quot; class=&quot;headerlink&quot; title=&quot;Redesigned and rebuilt UI&quot;&gt;&lt;/a&gt;Redesigned and rebuilt UI&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://66.media.tumblr.com/7936bfddeddf68058784eb6d815cd631/tumblr_inline_nveuwhsdFu1qzc111_540.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Video.js has had an all-CSS skin (including for Flash) since it was created in 2010 (the &lt;a href=&quot;http://videojs.github.io/video.js/&quot;&gt;first version&lt;/a&gt; was &lt;em&gt;literally&lt;/em&gt; all CSS, no images, fonts, or svgs. And still works today!) Over those years we’ve seen some very creative customizations and learned a lot about what users are hoping to do with player design when they’re able to use native web techologies. For 5.0 we’ve both simplified the default layout and added more flexibility than ever before.&lt;/p&gt;
&lt;h3 id=&quot;Flex-Box-Layout&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Flex-Box-Layout&quot; class=&quot;headerlink&quot; title=&quot;Flex Box Layout&quot;&gt;&lt;/a&gt;Flex Box Layout&lt;/h3&gt;&lt;p&gt;One of our biggest challenges with the layout of the controls is keeping the control bar flexible and able to accomodate any new buttons that a plugin author might want to add. In 4.0 we used CSS floats to allow a new button to be appended to the control bar and flow into space. This however led to a very awkward tab order for anyone navigating the controls with the tab key. In 5.0 we were finally able to take advantage of &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flex box&lt;/a&gt;, which improves on the flexibility of the previous version while also maintaining the right tab order. In IE8 (because yeah, we still support that) we fall back to &lt;code&gt;display:table&lt;/code&gt;, which works surprisingly well.&lt;/p&gt;
&lt;h3 id=&quot;Improved-accessibility&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Improved-accessibility&quot; class=&quot;headerlink&quot; title=&quot;Improved accessibility&quot;&gt;&lt;/a&gt;Improved accessibility&lt;/h3&gt;&lt;p&gt;Accessibility has been a &lt;a href=&quot;http://www.3playmedia.com/2015/04/30/video-jss-approach-to-video-player-accessibility/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hot topic as of late&lt;/a&gt;, with &lt;a href=&quot;http://www.w3.org/WAI/intro/wcag&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;new regulations&lt;/a&gt; helping push the industry forward and defining what accessbility means for a player. The tab-order mentioned previously was an eye sore in our accessiblity support, and we’re all happy to have that fixed in 5.0. Addtionally, after &lt;a href=&quot;https://github.com/videojs/video.js/issues/841&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a long debate&lt;/a&gt;, we switched our Button elements to use the actual HTML button tag instead of divs. Using divs previously gave us a large degree of safety from external styles clobbering our own styles. This can be a big problem for html-based widgets that are dropped into other frameworks that add styles directly to native elements (&lt;em&gt;ahem&lt;/em&gt; Foundation). In the end however the accessibility experts in our community made a strong enough case, pointing out that there’s still a number of devices that do not handle ARIA roles and javascript enhanced divs well enough to fully rely on them.&lt;/p&gt;
&lt;h3 id=&quot;Switched-from-LESS-to-SASS&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Switched-from-LESS-to-SASS&quot; class=&quot;headerlink&quot; title=&quot;Switched from LESS to SASS&quot;&gt;&lt;/a&gt;Switched from LESS to SASS&lt;/h3&gt;&lt;p&gt;The original decision to use &lt;a href=&quot;http://lesscss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Less&lt;/a&gt; over &lt;a href=&quot;http://sass-lang.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sass&lt;/a&gt; in version 4 was largely driven by the fact that it could be run in the browser. We knew we wanted to start using a preprocessor, but we still wanted to provide things like the skin designer which meant we needed to be able to do all pre-processing on the client. Less was totally appropriate for the job and allowed us to start modernizing the skin in appearance and tooling.&lt;/p&gt;
&lt;p&gt;Since then, thanks to &lt;a href=&quot;https://github.com/kripken/emscripten&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emscripten&lt;/a&gt;, Sass has joined Less in the browser. This meant that we were free to use whichever of the two we liked, so all the contributors put on Less or Sass branded boxing gloves and fought until two gloves were still standing, which turned out to be Sass. Aside from the battle royale, there were a few reasons we decided to go with Sass for the new base skin in version 5.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Familiarity&lt;/strong&gt;. Core contributors that started working on the new base skin were a little more experienced with Sass and simply preferred it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;. On top of allowing us to use Sass without requiring Ruby, &lt;a href=&quot;https://github.com/sass/libsass&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LibSass&lt;/a&gt; is &lt;em&gt;fast&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Popularity&lt;/strong&gt;. Your parents are right, not everything’s a popularity contest… but it is when you want to pick between two basically equivalent* tools. We wanted to pick something that more devs would be familiar with, and that seems to be Sass. On that note, it was also requested fairly often on the issue tracker.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community&lt;/strong&gt;. This goes hand in hand with popularity, but the Sass community is large and growing, with currently popular projects using it (and &lt;a href=&quot;http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;switching to it&lt;/a&gt;) and new tooling popping up every day along side industry standards such as &lt;a href=&quot;http://compass-style.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Compass&lt;/a&gt; and &lt;a href=&quot;http://bourbon.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bourbon&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Big changes that we made during the switch that are unrelated to the tooling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We broke apart the source files.&lt;/li&gt;
&lt;li&gt;As mentioned above, we switched to a Flexbox-based layout. “What about IE8,” you say again? Tables. &lt;a href=&quot;https://github.com/videojs/video.js/blob/a5dad5ade29a0ae33e0b80c600f1a06c953aff52/src/css/components/_control-bar.scss#L55-L58&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Srsly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Improved support for responsive layouts.&lt;/li&gt;
&lt;li&gt;We simplified the amount of customization we explicitly allow in the source to encourage people to build &lt;em&gt;on top&lt;/em&gt; of the base skin, not edit it directly.&lt;/li&gt;
&lt;li&gt;On the simplification note, we tried to simplify the base skin as much as possible. Our goal was to allow designers to build &lt;em&gt;anything&lt;/em&gt; on top of the base without having to entirely start from scratch.&lt;/li&gt;
&lt;li&gt;And more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Switched-to-Material-Icons&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Switched-to-Material-Icons&quot; class=&quot;headerlink&quot; title=&quot;Switched to Material Icons&quot;&gt;&lt;/a&gt;Switched to Material Icons&lt;/h3&gt;&lt;p&gt;The switch to an icon font in version 4 was a huge win for Video.js. It allowed designers to do things as basic as style component icon colors with &lt;em&gt;just CSS&lt;/em&gt;. It simplified the code base by allowing us not not worry about things like image sprites or other image optimizations. The only recurring issue we ran into was the process around adding new icons to the set, which ultimately involved just uploading the font back to &lt;a href=&quot;https://icomoon.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IcoMoon&lt;/a&gt; and re-exporting.&lt;/p&gt;
&lt;p&gt;In version 5, we’ve switched everything about our icon set. First we went with a new set of icons: Google’s &lt;a href=&quot;https://www.google.com/design/icons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Icons&lt;/a&gt;. This was a big step forward in terms of appearance, but we had the same issue as far as adding new icons. To fix that process we created new &lt;a href=&quot;https://github.com/videojs/font&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Font tooling&lt;/a&gt; for the project.&lt;/p&gt;
&lt;p&gt;The tooling is really simple, but it allows anyone to write out a JSON configuration file pointing to any SVGs they have access to. The output of that tool is the font files themselves along with a new SCSS partial that gets imported into our Sass workflow in the core project at build.&lt;/p&gt;
&lt;p&gt;We primarily use the Material icons, but occasionally we have to pull in a social media icon from another set, which this process greatly simplifies. See icons missing in the set that you’d like to use? Give the tool a try and let us know what you think!&lt;/p&gt;
&lt;h2 id=&quot;Rebuilt-the-library-in-ES6-Babel-Browserify-including-Modules-and-Classes&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Rebuilt-the-library-in-ES6-Babel-Browserify-including-Modules-and-Classes&quot; class=&quot;headerlink&quot; title=&quot;Rebuilt the library in ES6/Babel/Browserify including Modules and Classes&quot;&gt;&lt;/a&gt;Rebuilt the library in ES6/Babel/Browserify including Modules and Classes&lt;/h2&gt;&lt;p&gt;5.0 comes with bit of enlightenment as we ditch our not-built-here syndrome and make a leap to post-modern development practices.&lt;/p&gt;
&lt;p&gt;When we started work on the new version we originally planned to just use browserify and CommonJS modules, but when we took a closer look at the great work being done on &lt;a href=&quot;https://babeljs.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel&lt;/a&gt;, it only made sense to jump again to ES6 modules and save ourselves another code transition down the road, while at the same time gaining a lot of great new JavaScript features.&lt;/p&gt;
&lt;p&gt;Side-stepping any argument of the validity of JavaScript Classes, Video.js has always used classes for the internal UI framework. We used a custom class implementation that was of course incompatible with other custom implementations, so the move to ES6 opens the door for some potential interoperability with other frameworks as more people use ES6 classes specifically.&lt;/p&gt;
&lt;p&gt;With the move to modules we’ve also opened the door to using more of the glorious ecosystem that is &lt;a href=&quot;https://www.npmjs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt;. We’ve started to toss out some of the non-core internal libraries that required us to be experts in just about everything, and replace them with other community-built modules. So far this includes libraries like &lt;a href=&quot;https://lodash.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lodash&lt;/a&gt; and &lt;a href=&quot;https://github.com/raynos/xhr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raynos/xhr&lt;/a&gt;, and we’re actively looking for opportunies where we can share more code.&lt;/p&gt;
&lt;h3 id=&quot;What-does-this-mean-for-the-end-user&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#What-does-this-mean-for-the-end-user&quot; class=&quot;headerlink&quot; title=&quot;What does this mean for the end user?&quot;&gt;&lt;/a&gt;What does this mean for the end user?&lt;/h3&gt;&lt;p&gt;This should make it easier for end-users of videojs, especially if they use browserify themselves. With this change, users can just&lt;br&gt;&lt;code&gt;require(&amp;#39;video.js&amp;#39;)&lt;/code&gt; in their &lt;code&gt;app.js&lt;/code&gt; or whenever they need it to instantiate players. In addition, plugins that were written&lt;br&gt;using browserify themselves can be added very easily using browserify and &lt;code&gt;require&lt;/code&gt; as well. Of course, you can use Babel and&lt;br&gt;ES6 modules as well. For example, your &lt;code&gt;app.js&lt;/code&gt; could look like the following, assuming browserify and babel for ES6 syntax:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// import videojs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; videojs &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;video.js&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// import several plugins.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Each requires videojs itself and registers itself accordingly.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;videojs-playlist&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;videojs-thumbnail&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this isn&#39;t ready yet, unfortunately&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;videojs-contrib-hls&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// make a player&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; player = videojs(&lt;span class=&quot;string&quot;&gt;&#39;my-video&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// initialize some plugins&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;player.playlist(myplaylist);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;player.thumbnail(myThumbnailConfig);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Added-support-for-responsive-layouts-including-auto-sizing-to-the-video-content&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Added-support-for-responsive-layouts-including-auto-sizing-to-the-video-content&quot; class=&quot;headerlink&quot; title=&quot;Added support for responsive layouts including auto-sizing to the video content&quot;&gt;&lt;/a&gt;Added support for responsive layouts including auto-sizing to the video content&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0AEFvF2bHtw&amp;amp;feature=youtu.be&amp;amp;t=50m37s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Check out this video from the SF Vid Tech meetup for quick overview.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Proper&lt;/em&gt; support for responsive layouts has been a long time request. We’ve had tips and guides for how to make it work in the old version, but now it’s seamlessly built into the player. First we have two easy CSS classes you can just add to the embed code, &lt;code&gt;vjs-16-9&lt;/code&gt; and &lt;code&gt;vjs-4-3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;video class=&amp;quot;video-js vjs-16-9 vjs-default-skin&amp;quot; ...&amp;gt;&amp;lt;/video&amp;gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or you can set the player to a fluid layout in the options and it will &lt;strong&gt;automatically update to match the aspect ratio of the content.&lt;/strong&gt;, whether you set a width, height, or neither.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myPlayer = videojs(id, &amp;#123; fluid: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, preload: &lt;span class=&quot;string&quot;&gt;&#39;metadata&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This was very tricky to implement, but well worth the effort. We have a &lt;a href=&quot;http://jsbin.com/qucinu/edit?html,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsbin example page&lt;/a&gt; where you can try out different options.&lt;/p&gt;
&lt;h2 id=&quot;Added-support-for-HTTP-Live-Streaming-in-desktop-browsers-WITHOUT-Flash&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Added-support-for-HTTP-Live-Streaming-in-desktop-browsers-WITHOUT-Flash&quot; class=&quot;headerlink&quot; title=&quot;Added support for HTTP Live Streaming in desktop browsers WITHOUT Flash&quot;&gt;&lt;/a&gt;Added support for HTTP Live Streaming in desktop browsers WITHOUT Flash&lt;/h2&gt;&lt;p&gt;We’ve been chasing down the last excuses for using Flash for video for awhile now and have reached some major milestones. &lt;a href=&quot;http://videojs.github.io/videojs-contrib-hls/&quot;&gt;videojs-contrib-hls&lt;/a&gt; 1.0 (it’s about time!) will use &lt;a href=&quot;https://w3c.github.io/media-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Media Source Extensions&lt;/a&gt;, an advanced video element API, to provide HLS playback in Chrome and Microsoft Edge. Besides the enhanced debuggability of doing everything in Javascript, most of the computation has been moved to a web worker and is hardware accelerated on platforms that support it. That means even 60fps or 4k streams should play back without a stutter and your battery will get less of a workout, too. As part of that work, we’ve split off the code we use to repackage HLS video into a separate project in the video.js org: &lt;a href=&quot;https://github.com/videojs/mux.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mux.js&lt;/a&gt;. If you’re interested in how video works down at the bit level, check it out! We’re always looking for new contributors.&lt;/p&gt;
&lt;h2 id=&quot;Switched-from-Closure-Compiler-to-Uglify-We-STOPPED-mangling-object-properties&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Switched-from-Closure-Compiler-to-Uglify-We-STOPPED-mangling-object-properties&quot; class=&quot;headerlink&quot; title=&quot;Switched from Closure Compiler to Uglify (We STOPPED mangling object properties)&quot;&gt;&lt;/a&gt;Switched from Closure Compiler to Uglify (We STOPPED mangling object properties)&lt;/h2&gt;&lt;p&gt;In version 4.0 we introduced Google’s Closure Compiler into our build chain. It’s &lt;strong&gt;advanced optimizations mode&lt;/strong&gt; saved us 25% in filesize over UglifyJS at the time. The downsides were that it required us to write the code in very specific ways and mangled internal object properties, which made contributing, debugging, and writing plugins much more difficult. The reality today is that with gzip and improved bandwidth, video.js users are pushing us less and less to squeeze the last bit of filesize out of the library. So for 5.0 we’ve switched back to UglifyJS. Plugin authors rejoice!&lt;/p&gt;
&lt;h2 id=&quot;Improved-audio-only-support&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Improved-audio-only-support&quot; class=&quot;headerlink&quot; title=&quot;Improved audio-only support&quot;&gt;&lt;/a&gt;Improved audio-only support&lt;/h2&gt;&lt;p&gt;Hey did you know? Video.js also supports the HTML5 audio tag. Try it out and let us know what you think.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;audio id=&amp;quot;my_audio_1&amp;quot; class=&amp;quot;video-js vjs-default-skin&amp;quot; controls data-setup=&amp;quot;{}&amp;quot;&amp;gt;&amp;lt;source src=&amp;quot;MY_AUDIO_FILE.mp3&amp;quot; type=&amp;quot;audio/mp3&amp;quot;&amp;gt;&amp;lt;/source&amp;gt;&amp;lt;/audio&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Added-6-more-language-translations&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Added-6-more-language-translations&quot; class=&quot;headerlink&quot; title=&quot;Added 6 more language translations&quot;&gt;&lt;/a&gt;Added 6 more language translations&lt;/h2&gt;&lt;p&gt;Ever since we implemented localization in Video.js there’s been a wave of contributions from all over the world. With 5.0 comes Danish, Bosnian, Serbian, Croatian, Finnish, and Turkish. This brings the number of lanugages supported to 25!&lt;/p&gt;
&lt;h2 id=&quot;New-definition-around-plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#New-definition-around-plugins&quot; class=&quot;headerlink&quot; title=&quot;New definition around plugins&quot;&gt;&lt;/a&gt;New definition around plugins&lt;/h2&gt;&lt;p&gt;Plugins mostly have not changed from how they worked in Videojs 4.x. You still register and use them the same way.&lt;br&gt;The only major change is that if you are instantiating a plugin inside the config of a player, this plugin will get run&lt;br&gt;before the player is ready. This is so that if plugins are doing some UI work or adding themselves as children of the player&lt;br&gt;they can do so early on. This means that plugins that require the player to be ready would need to handle that themselves or&lt;br&gt;else not support instantiation via the player config. Ex:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;videojs(&lt;span class=&quot;string&quot;&gt;&#39;my-video&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    playlists: &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As part of the update to videojs 5 and our switch from Google’s Closure Compiler to Uglify,&lt;br&gt;we’ve been focusing on making the plugin experience better.&lt;br&gt;We’ve made sure to export some of the utility functions that we use inside our own codebase to make writing plugins easier.&lt;br&gt;This way plugins don’t need to include extra code themselves if a function, merge, for example, is available from videojs.&lt;/p&gt;
&lt;p&gt;Also, we’re encouraging plugin authors to publish their plugins on npm. If the plugins are tagged with &lt;code&gt;videojs-plugin&lt;/code&gt;,&lt;br&gt;they’ll show up on our &lt;a href=&quot;http://videojs.com/plugins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spiffy new plugins listing page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;New-player-skin-designer-on-Codepen&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#New-player-skin-designer-on-Codepen&quot; class=&quot;headerlink&quot; title=&quot;New player skin designer on Codepen&quot;&gt;&lt;/a&gt;New player skin designer on Codepen&lt;/h2&gt;&lt;p&gt;We’re taking a slightly different approach with &lt;a href=&quot;http://codepen.io/heff/pen/EarCt/left/?editors=010&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the designer&lt;/a&gt; now. Instead of exposing all CSS properties from the default skin, we’ve set up a template starter that has fewer options and allows you to get at the more common customizations more easily.&lt;/p&gt;
&lt;p&gt;It’s also using &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codepen&lt;/a&gt;, which is a great service and much better than hosting the designer ourselves. If you use it to make a cool skin, be sure to let us know. Tweet at @videojs or comment on the designer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codepen.io/heff/pen/EarCt/left/?editors=010&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://codepen.io/heff/pen/EarCt/left/?editors=010&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;New-project-governance-model&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#New-project-governance-model&quot; class=&quot;headerlink&quot; title=&quot;New project governance model&quot;&gt;&lt;/a&gt;New project governance model&lt;/h2&gt;&lt;p&gt;Jumping right on that band wagon, we’re implementing a governance model for the project that’s similar to &lt;a href=&quot;https://github.com/nodejs/node/blob/20dae2a90610d7b6243dffc3c88a0cd2dfbcb7ce/GOVERNANCE.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js/io.js&lt;/a&gt; and &lt;a href=&quot;http://rfc.zeromq.org/spec:22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;0MQ’s C4.1&lt;/a&gt;. Along with some better structure around the project it comes with a lower bar for becoming an official maintainer of the project. We’re aiming to have a more diverse set of people and companies representing the leadership of Video.js.&lt;/p&gt;
&lt;h2 id=&quot;Improved-the-definition-of-a-playback-technology-or-“tech”&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Improved-the-definition-of-a-playback-technology-or-“tech”&quot; class=&quot;headerlink&quot; title=&quot;Improved the definition of a playback technology or “tech”&quot;&gt;&lt;/a&gt;Improved the definition of a playback technology or “tech”&lt;/h2&gt;&lt;p&gt;The creator of our most popular plugin (&lt;a href=&quot;https://github.com/eXon/videojs-youtube&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the YouTube plugin&lt;/a&gt;) took on the task of improving the relationship between the player and techs. “Tech” is the term we use to describe the translation layer between the player API and the underlying video objects, which can be the HTML5 video element, plugins like &lt;a href=&quot;https://github.com/videojs/video-js-swf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flash&lt;/a&gt; and &lt;a href=&quot;https://github.com/Afterster/videojs-silverlight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Silverlight&lt;/a&gt;, or other players like &lt;a href=&quot;https://github.com/eXon/videojs-youtube&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Youtube&lt;/a&gt; and &lt;a href=&quot;https://github.com/eXon/videojs-vimeo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vimeo&lt;/a&gt;. If you’ve built a tech or are intersted in building one, check out the changes in 5.0.&lt;/p&gt;
&lt;h2 id=&quot;Switched-to-JSDoc-from-a-home-grown-docs-parser&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Switched-to-JSDoc-from-a-home-grown-docs-parser&quot; class=&quot;headerlink&quot; title=&quot;Switched to JSDoc from a home-grown docs parser&quot;&gt;&lt;/a&gt;Switched to JSDoc from a home-grown docs parser&lt;/h2&gt;&lt;p&gt;In the last version we had a &lt;a href=&quot;https://github.com/videojs/doc-generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;custom built docs generator&lt;/a&gt; that used &lt;a href=&quot;http://esprima.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;esprima&lt;/a&gt; to parse the AST and create a lot of the API docs just from the code, with JSDoc tags filling in the rest. That could still be a good project, but it’s become too much to maintain and too limited for plugin authors.&lt;/p&gt;
&lt;p&gt;For 5.0 we’ve switched to &lt;a href=&quot;https://github.com/jsdoc3/jsdoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsdoc&lt;/a&gt;. Check out the &lt;a href=&quot;http://docs.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;new docs site&lt;/a&gt;. Anyone want to help us design it? :)&lt;/p&gt;
&lt;h2 id=&quot;Switched-to-BrowserStack-for-automated-browser-testing&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Switched-to-BrowserStack-for-automated-browser-testing&quot; class=&quot;headerlink&quot; title=&quot;Switched to BrowserStack for automated browser testing&quot;&gt;&lt;/a&gt;Switched to BrowserStack for automated browser testing&lt;/h2&gt;&lt;p&gt;For 5.0 we have moved from &lt;a href=&quot;https://saucelabs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sauce Labs&lt;/a&gt; to &lt;a href=&quot;https://www.browserstack.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowserStack&lt;/a&gt; as our browser provider for automated testing. BrowserStack is a cross-browser testing tool that provides desktop and mobile browsers and are currently rolling out support for real mobile devices. We moved to BrowserStack to reduce the amount of timeout errors, build time and false positives we were seeing in our builds previously. This stability has allowed us to expand our testing coverage to include iOS, Android and all supported versions of Internet Explorer.&lt;/p&gt;
&lt;h2 id=&quot;Switched-to-Fastly-for-our-CDN&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#Switched-to-Fastly-for-our-CDN&quot; class=&quot;headerlink&quot; title=&quot;Switched to Fastly for our CDN&quot;&gt;&lt;/a&gt;Switched to Fastly for our CDN&lt;/h2&gt;&lt;p&gt;The CDN-hosted version of Video.js at vjs.zencdn.net is downloaded over 2 BILLION times every month, even with agressive browser-side caching. Video.js is relatively small in file size but that’s still 34 TB per month. We were previously piggy-backing on Brightcove’s Akamai account, but Fastly offered to host the library for free. We gave it a shot and fell in love. In full disclosure, our testing found that Fastly didn’t perform quite as well as Akamai internationally, but Fastly’s user interface, API, and real-time purge are things of beauty and make our &lt;a href=&quot;http://github.com/videojs/cdn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CDN deploy process&lt;/a&gt; much simpler.&lt;/p&gt;
&lt;h2 id=&quot;New-Website-and-Logo&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#New-Website-and-Logo&quot; class=&quot;headerlink&quot; title=&quot;New Website and Logo!&quot;&gt;&lt;/a&gt;New Website and Logo!&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://67.media.tumblr.com/cb1841277ee68c248443e42c0391e286/tumblr_inline_nvf06qcRca1qzc111_540.png&quot; alt=&quot;Video.js Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;We simplified it a bit. What do you think?&lt;/p&gt;
&lt;p&gt;If you don’t feel comfortable contributing to Video.js we can always use help on &lt;a href=&quot;http://videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the website&lt;/a&gt;. It gets &lt;strong&gt;over 200,000 unique views&lt;/strong&gt; every month. Contribute at &lt;a href=&quot;https://github.com/videojs/videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the website repo&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;HALP&quot;&gt;&lt;a href=&quot;/blog/Video-js-5-The-Only-Thing-That’s-Changed-Is-Everything-except-for-like-3-things-that-didn-t-including-the-name/#HALP&quot; class=&quot;headerlink&quot; title=&quot;HALP!&quot;&gt;&lt;/a&gt;HALP!&lt;/h1&gt;&lt;p&gt;It’s our community that keeps Video.js actually decent and &lt;strong&gt;truly free&lt;/strong&gt; (Apache 2), so don’t be shy. Jump in and submit a bug, build a plugin, or design a skin.&lt;/p&gt;
&lt;p&gt;In conclusion, it’s been a good year of a lot of good work. Thanks!&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;no-fancybox&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10298267&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img width=&quot;18&quot; src=&quot;http://66.media.tumblr.com/1e6ec3eacf62a57d0543b01cb4454527/tumblr_inline_nvesinCDHy1qzc111_500.gif&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/videojs/status/648921250882977792&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img width=&quot;18&quot; src=&quot;http://66.media.tumblr.com/2872e2376c584d2abe4293d442e367e2/tumblr_inline_nvesehMSl91qzc111_540.png&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/ASsV6seqM8A&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;First and foremost, &lt;strong&gt;THANK YOU&lt;/strong&gt; to the 25 contributors who completed and merged &lt;strong&gt;146 pull requests&lt;/strong&gt; and upd
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>It&#39;s here: 5.0 release candidates!</title>
    <link href="https://videojs.github.io/blog/It-s-here-5-0-release-candidates/"/>
    <id>https://videojs.github.io/blog/It-s-here-5-0-release-candidates/</id>
    <published>2015-06-08T23:59:42.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Today we&amp;rsquo;re releasing our first official 5.0 release candidate. We&amp;rsquo;re really excited to get this into the wild, but a lot has changed under hood. It should be stable for normal usage, but we&amp;rsquo;ve got a limited number of test devices (and testers for that matter), so what we need now is for people to bang on 5.0 and let us know what breaks!&lt;/p&gt;
&lt;p&gt;You can either grab the master branch from Github and run &lt;code&gt;grunt&lt;/code&gt; to create your own build, or we&amp;rsquo;ll push each new release candidate to the CDN. We&amp;rsquo;re going to be moving quickly and pushing new candidates when we uncover / fix bugs, so be sure to check for new versions! As of this post, the newest release is &lt;a href=&quot;http://vjs.zencdn.net/5.0.0-rc.2/video.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5.0-rc.2&lt;/a&gt;. If you&amp;rsquo;d like to see a demo, we&amp;rsquo;ve got one up on &lt;a href=&quot;http://jsbin.com/halokodoxo/1/edit?html,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSBin&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;What-rsquo-s-different&quot;&gt;&lt;a href=&quot;/blog/It-s-here-5-0-release-candidates/#What-rsquo-s-different&quot; class=&quot;headerlink&quot; title=&quot;What&amp;rsquo;s different?&quot;&gt;&lt;/a&gt;What&amp;rsquo;s different?&lt;/h2&gt;&lt;h3 id=&quot;New-Base-Theme&quot;&gt;&lt;a href=&quot;/blog/It-s-here-5-0-release-candidates/#New-Base-Theme&quot; class=&quot;headerlink&quot; title=&quot;New Base Theme&quot;&gt;&lt;/a&gt;New Base Theme&lt;/h3&gt;&lt;p&gt;The most obvious difference you&amp;rsquo;ll see when you load up the release candidate is most likely going to be the new base theme. We&amp;rsquo;ve worked hard to simplify the theme and make it possible to do as much as possible with purely CSS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/c0dLiQlBE8F+&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are elements in the control bar that aren&amp;rsquo;t shown by default, but can be by simply overriding a little CSS. For example, if you&amp;rsquo;d rather use an inline volume control instead of the popup menu, you could make these changes:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;css
.video-js .vjs-volume-menu-button { display: none; }
.video-js .vjs-mute-control, .video-js .vjs-volume-control { display: flex; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This just hides the &lt;code&gt;.vjs-volume-menu-button&lt;/code&gt; control, and unhides the mute control / inline volume control. Other things that are available but hidden by default are a time divider (&lt;code&gt;.vjs-time-devider&lt;/code&gt;), total duration (&lt;code&gt;.vjs-duration&lt;/code&gt;), and a spacer (&lt;code&gt;.vjs-custom-control-spacer&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;ES6&quot;&gt;&lt;a href=&quot;/blog/It-s-here-5-0-release-candidates/#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h3&gt;&lt;p&gt;Thanks to the incredible &lt;a href=&quot;http://babeljs.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel project&lt;/a&gt;, we&amp;rsquo;re able to write ES2015 and have it transpiled to ES5. It&amp;rsquo;s fantastic, and means we get glorious things such as string interpolation, so reading our codebase &lt;code&gt;just got a whole lot ${_.sample([&amp;#39;better&amp;#39;, &amp;#39;awesomer&amp;#39;, &amp;#39;more fantastic&amp;#39;, &amp;#39;less plus-y&amp;#39;])}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On our Wiki we have a page devoted to &lt;a href=&quot;https://github.com/videojs/video.js/wiki/ES6-Features-used-in-the-source&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 features we use extensively&lt;/a&gt;. There are probably a few little things missing, but if you familiarize yourself with those features you should feel comfortable reading the Video.js source.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re also using &lt;a href=&quot;http://browserify.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt; (with a Babelify transform), so now we&amp;rsquo;re able to take advantage of all the browser packages NPM has to offer. One big area this has allowed us to improve is utility functions, which are now provided by &lt;a href=&quot;http://lodash.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lodash&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Plugins&quot;&gt;&lt;a href=&quot;/blog/It-s-here-5-0-release-candidates/#Plugins&quot; class=&quot;headerlink&quot; title=&quot;Plugins&quot;&gt;&lt;/a&gt;Plugins&lt;/h3&gt;&lt;p&gt;Plugins are initialized earlier than before, giving plugin developers even more control over the player experience. They&amp;rsquo;re now initialized before other components are added (like the control bar), but after the player div is created. Keep in mind you&amp;rsquo;ll now need to wait for the &lt;code&gt;ready&lt;/code&gt; event to do things such as append items to the control bar.&lt;/p&gt;
&lt;p&gt;The plugin-development world should have also gotten more predictable since we&amp;rsquo;ve gotten a little less aggressive with our minification. Keep in mind that when you want to subclass a component externally (not using ES2015), you&amp;rsquo;ll want to use &lt;a href=&quot;https://github.com/videojs/video.js/wiki/5.0-Change-Details#switched-to-es6-classes-updated-how-you-subclass-components&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;videojs.extends&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find more information on our &lt;a href=&quot;https://github.com/videojs/video.js/wiki/5.0-Change-Details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5.0 change details&lt;/a&gt; wiki page.&lt;/p&gt;
&lt;h1 id=&quot;Want-to-be-helpful&quot;&gt;&lt;a href=&quot;/blog/It-s-here-5-0-release-candidates/#Want-to-be-helpful&quot; class=&quot;headerlink&quot; title=&quot;Want to be helpful?&quot;&gt;&lt;/a&gt;Want to be helpful?&lt;/h1&gt;&lt;p&gt;Use it! We&amp;rsquo;ve spent months using this player in very specific ways while development, but there&amp;rsquo;s always the issue of &amp;ldquo;not being able to &lt;a href=&quot;http://en.wiktionary.org/wiki/see_the_forest_for_the_trees&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;see the forest for the trees&lt;/a&gt;&amp;rdquo;. If you find issues while testing the player, please let us know on the &lt;a href=&quot;https://github.com/videojs/video.js/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue tracker&lt;/a&gt;.&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/lLH3vkDw9AY&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Today we&amp;rsquo;re releasing our first official 5.0 release candidate. We&amp;rsquo;re really excited to get this into the wild, but a lot has
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
      <category term="release" scheme="https://videojs.github.io/blog/tags/release/"/>
    
      <category term="videojs" scheme="https://videojs.github.io/blog/tags/videojs/"/>
    
  </entry>
  
  <entry>
    <title>Video.js 4.12 - The last of the 4 minors</title>
    <link href="https://videojs.github.io/blog/Video-js-4-12-The-last-of-the-4-minors/"/>
    <id>https://videojs.github.io/blog/Video-js-4-12-The-last-of-the-4-minors/</id>
    <published>2015-02-18T18:32:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Much-improved-WebVTT-support&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Much-improved-WebVTT-support&quot; class=&quot;headerlink&quot; title=&quot;Much improved WebVTT support&quot;&gt;&lt;/a&gt;Much improved WebVTT support&lt;/h2&gt;&lt;p&gt;We added basic WebVTT support really early on, which we were pretty proud of. As browsers added support, however, our shim started to lag a bit, or at the very least, cause issues with browsers that required native support (here’s looking at you, iOS).&lt;/p&gt;
&lt;p&gt;So, we’re happy to announce that our text track support is vastly improved with this version! Instead of continuing to try and build out our own WebVTT parser, we’ve pulled in Mozilla’s fantastic work, &lt;a href=&quot;https://github.com/mozilla/vtt.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VTT.js&lt;/a&gt;. This is the WebVTT implementation used in Firefox / Gecko, so we’re confident that this is a substantial leap forward for Video.js and our accessibility efforts.&lt;/p&gt;
&lt;h2 id=&quot;Don’t-use-captions-Feeling-disappointed&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Don’t-use-captions-Feeling-disappointed&quot; class=&quot;headerlink&quot; title=&quot;Don’t use captions? Feeling disappointed?&quot;&gt;&lt;/a&gt;Don’t use captions? Feeling disappointed?&lt;/h2&gt;&lt;p&gt;You shouldn’t feel disappointed, this is a great day! This release includes a lot of fixes, and although fixes are always exciting to the people affected, other people can feel a hefty dose of “meh”. We’re excited to say, however, that this release is exciting for another, very important reason.&lt;/p&gt;
&lt;p&gt;This is the &lt;strong&gt;last minor&lt;/strong&gt; release in the version 4 family. There might be a few patches, but from now on, master is officially version 5.0-in-waiting. Party.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://media.giphy.com/media/d89VuJ4GflFfO/giphy.gif&quot; alt=&quot;party&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Notable-updates-and-fixes-for-4-12&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Notable-updates-and-fixes-for-4-12&quot; class=&quot;headerlink&quot; title=&quot;Notable updates and fixes for 4.12&quot;&gt;&lt;/a&gt;Notable updates and fixes for 4.12&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The hide / show methods now toggle a class (&lt;code&gt;.vjs-hidden&lt;/code&gt;) instead of applying inline styles. Make sure to update your stylesheet as well!&lt;/li&gt;
&lt;li&gt;A new &lt;code&gt;.vjs-scrubbing&lt;/code&gt; class gets applied while, you guessed it, scrubbing so menus can be prevented from erroneously showing on hover.&lt;/li&gt;
&lt;li&gt;Improved url parsing in IE9.&lt;/li&gt;
&lt;li&gt;Ever wondered what version you’re using? Now there’s a VERSION key. Woot.&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;.vjs-ended&lt;/code&gt; class that’s added when playback reaches the end of the timeline (also known as: ended).&lt;/li&gt;
&lt;li&gt;Player networkState and readyState properties available across techs&lt;/li&gt;
&lt;li&gt;Video.js is now exported as a named AMD module&lt;/li&gt;
&lt;li&gt;Mobile scrolling improvements&lt;/li&gt;
&lt;li&gt;And more! Fixes galore!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Translation-party-continues&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Translation-party-continues&quot; class=&quot;headerlink&quot; title=&quot;Translation party continues&quot;&gt;&lt;/a&gt;Translation party continues&lt;/h2&gt;&lt;p&gt;We’re now up to &lt;strong&gt;19&lt;/strong&gt; community submitted translations! Entirely new translations in this release include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traditional Chinese&lt;/li&gt;
&lt;li&gt;Vietnamese&lt;/li&gt;
&lt;li&gt;Czech&lt;/li&gt;
&lt;li&gt;Catalan&lt;/li&gt;
&lt;li&gt;Bulgarian&lt;/li&gt;
&lt;li&gt;Turkish&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Video-js-in-the-wild&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Video-js-in-the-wild&quot; class=&quot;headerlink&quot; title=&quot;Video.js in the wild&quot;&gt;&lt;/a&gt;Video.js in the wild&lt;/h2&gt;&lt;p&gt;To be terribly honest, there is a level of starstruck over a few of these. Normally we just do one, but hey…&lt;/p&gt;
&lt;h4 id=&quot;Social-Media&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Social-Media&quot; class=&quot;headerlink&quot; title=&quot;Social Media&quot;&gt;&lt;/a&gt;Social Media&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://instagram.com/p/aye9QFmB96&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/ActuallyNPH/status/560049149836808192&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sh1ps-testing.tumblr.com/post/111334784868/lorem-ipsum-and-stuff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Global-News-Outlets&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Global-News-Outlets&quot; class=&quot;headerlink&quot; title=&quot;Global News Outlets&quot;&gt;&lt;/a&gt;Global News Outlets&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://graphics.wsj.com/data-mining-of-emotions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wall Street Journal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.theguardian.com/film/video/2015/feb/17/whiplash-should-win-best-picture-oscars-2015-video&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Guardian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bloomberg.com/news/videos/2015-02-13/a-harvard-mad-scientist-invented-ice-cream-that-has-skin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bloomberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dbtv.no/3827291177001#Dette_har_statsbudsjettet_%C3%A5_si_for_din_%C3%B8konomi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagbladet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;New-plugins-from-the-community&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#New-plugins-from-the-community&quot; class=&quot;headerlink&quot; title=&quot;New plugins from the community&quot;&gt;&lt;/a&gt;New plugins from the community&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/matthojo/videojs-Background&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-Background&lt;/a&gt;: A plugin that allows for videos to be displayed as a full background to any element.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/space87/videojs-BrightCove-tracking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-brightcoveAnalytics&lt;/a&gt;: Allow tracking of views/impressions &amp;amp; engagement data in videojs for Brightcove videos&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spchuang/videojs-caption&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-caption&lt;/a&gt;: Have the most flexibility and power for displaying caption videojs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/walsh9/videojs-transcript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-transcript&lt;/a&gt;: Display an interactive transcript from caption or subtitle tracks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/theonion/videojs-autoplay-toggle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-autoplay-toggle&lt;/a&gt;: adds an autoplay toggle which will persist to cookies or localstorage.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cladera/videojs-offset&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-offset&lt;/a&gt;: Allows you to play a segment of the video.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mente/videojs-youtube-progress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-youtube-progress&lt;/a&gt;: Preserve progress seeker when control bar is hidden.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FbF/projectorjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;projectorjs&lt;/a&gt;: A small no-dependencies JavaScript library that enables the display of overlays on native HTML5 video elements, or (optionally) video elements powered by videojs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/collab-project/videojs-record&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-record&lt;/a&gt;: A video.js plugin for recording audio/video files.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/tree/v1.2.0/contrib/videojs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-dashjs&lt;/a&gt;: Loads dash.js as a tech to support MPEG-DASH videos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Afterster/videojs-silverlight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-silverlight&lt;/a&gt;: Allows you to play WMV, WMA, MP4, MP3, WAV and FLAC medias through Silverlight within Video.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Afterster/videojs-vlc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-vlc&lt;/a&gt;: Allows you to play all media through VLC web plug-in within Video.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Afterster/videojs-aurora&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-aurora&lt;/a&gt;: Allows you to play WAV, OGG, MP3, M4A, AAC and FLAC medias through Aurora.js within Video.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Afterster/videojs-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-java&lt;/a&gt;: Allows you to play AIFF, AVI, GSM, MID, MPG, MP2, MOV, AU and WAV medias through Java within Video.js.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Raw-list-of-changes&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Raw-list-of-changes&quot; class=&quot;headerlink&quot; title=&quot;Raw list of changes&quot;&gt;&lt;/a&gt;Raw list of changes&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;@PeterDaveHello added a Traditional Chinese translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1729&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mmcc updated the hide/show functions to use a class instead of inline styles (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1681&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mister-ben added better handling of the additional videojs() arguments when the player is already initialized (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1730&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@anhskohbo added a Vietnamese translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1734&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@Sxmanek added a Czech translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1739&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@jcaron23 added the vjs-scrubbing CSS class and prevented menus from showing while scrubbing (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1741&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@dmlap fixed URL parsing in IE9 (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1765&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@gkatsev Fixed issue where ManualTimeUpdatesOff was not de-registering events (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@brycefisher Added a guide on player disposal (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1803&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@toniher added a Catalan translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1794&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mmcc added a VERSION key to the videojs object (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1798&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mmcc fixed an issue with text track hiding introduced in #1681 (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1804&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@dmlap exported video.js as a named AMD module (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1844&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@dmlap fixed poster hiding when the loadstart event does not fire (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1834&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@chikathreesix fixed an object delete error in Chrome (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1858&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@steverandy fixed an issue with scrolling over the player on touch devices (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1809&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mmcc improved tap sensitivity (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1830&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mister-ben added a vjs-ended class when playback reaches the end of the timeline (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1857&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@dmlap Add network and ready state properties (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1854&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@woollybogger exported the hasClass function (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1839&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@DevGavin fixed the Chinese translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1841&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@iSimonWeb added font-path variable (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1847&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@shoshomiga added a Bulgarian translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1849&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@ragecub3 added a Turkish translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1853&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@gkatsev greatly improved text track support and implemented vtt.js as the webvtt parser (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1749&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@gkatsev fixed captions showing by default in Chrome and Safari (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1865&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mister-ben fixed a woff warning in Firefox (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1870&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/RLR00vEFKVQ&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Much-improved-WebVTT-support&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-12-The-last-of-the-4-minors/#Much-improved-WebVTT-support&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>Video.js 4.9 - Now &lt;audio&gt; can join the party!</title>
    <link href="https://videojs.github.io/blog/Video-js-4-9-Now-can-join-the-party/"/>
    <id>https://videojs.github.io/blog/Video-js-4-9-Now-can-join-the-party/</id>
    <published>2014-10-03T00:49:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;HTML5-Audio-support&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-9-Now-can-join-the-party/#HTML5-Audio-support&quot; class=&quot;headerlink&quot; title=&quot;HTML5 Audio support&quot;&gt;&lt;/a&gt;HTML5 Audio support&lt;/h3&gt;&lt;p&gt;A common request we&amp;rsquo;ve seen is to be able to use Video.js with an &lt;code&gt;&amp;amp;lt;audio&amp;amp;gt;&lt;/code&gt; tag, and now you can! Usage is almost identical, you can just include a &lt;code&gt;data-setup={}&lt;/code&gt; attribute on an &lt;code&gt;&amp;amp;lt;audio&amp;amp;gt;&lt;/code&gt; tag or initialize via Javascript.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;lt;audio id=&amp;quot;audio_example&amp;quot; class=&amp;quot;video-js vjs-default-skin&amp;quot; controls 
  preload=&amp;quot;auto&amp;quot; width=&amp;quot;600&amp;quot; height=&amp;quot;600&amp;quot; 
  poster=&amp;quot;/img/awesome-album-art.png&amp;quot; data-setup=&amp;apos;{}&amp;apos;&amp;amp;gt;
  &amp;amp;lt;source src=&amp;quot;/audio/awesome-music.mp3&amp;quot; type=&amp;apos;audio/mp3&amp;apos;/&amp;amp;gt;
&amp;amp;lt;/audio&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only differences in behavior are that the poster image and controls are never hidden. This allows you to keep up something like album art during playback rather than a black video element. Since there&amp;rsquo;s no interesting content to hide (other than the poster image), we leave the controls showing to mimic a familiar audio player experience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/cp544DZlhuV+&quot; alt=&quot;Audio Screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Flash fallback still doesn&amp;rsquo;t support audio-only sources, but we&amp;rsquo;d like to add that in the future. In the meantime, audio playback with MP3 and Ogg sources should work fine in any (modern) browser that&amp;rsquo;s not IE8, so enjoy!&lt;/p&gt;
&lt;h3 id=&quot;More-translations&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-9-Now-can-join-the-party/#More-translations&quot; class=&quot;headerlink&quot; title=&quot;More translations!&quot;&gt;&lt;/a&gt;More translations!&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ve been really excited by the continued support in terms of new translations. This release contains Brazilian Portuguese, Japanese, Italian, French, and Korean, as well as some improvements to the previous Spanish translation. We&amp;rsquo;d love to see the trend continue, so if you&amp;rsquo;re fluent in a language please consider &lt;a href=&quot;https://github.com/videojs/video.js/blob/master/CONTRIBUTING.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;submitting&lt;/a&gt; improvements or whole new localizations!&lt;/p&gt;
&lt;h3 id=&quot;Video-js-in-the-wild&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-9-Now-can-join-the-party/#Video-js-in-the-wild&quot; class=&quot;headerlink&quot; title=&quot;Video.js in the wild&quot;&gt;&lt;/a&gt;Video.js in the wild&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera&lt;/a&gt; is an education platform that offers free courses online from some of the world&amp;rsquo;s top institutions. They&amp;rsquo;ve built great tools for video interaction on top of Video.js, and are even going to talk about some of the work they&amp;rsquo;re doing at October&amp;rsquo;s &lt;a href=&quot;http://sfvideo.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SF Video Meetup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/cotq6_EJ69v+&quot; alt=&quot;Coursera Screenshot&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;New-Plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-9-Now-can-join-the-party/#New-Plugins&quot; class=&quot;headerlink&quot; title=&quot;New Plugins&quot;&gt;&lt;/a&gt;New Plugins&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/collab-project/videojs-wavesurfer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-wavesurfer&lt;/a&gt; - Adds a navigable waveform for audio files, using the excellent wavesurfer.js library.&lt;/p&gt;
&lt;h3 id=&quot;Full-list-of-changes&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-9-Now-can-join-the-party/#Full-list-of-changes&quot; class=&quot;headerlink&quot; title=&quot;Full list of changes&quot;&gt;&lt;/a&gt;Full list of changes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;@deedos added a Brazilian Portuguese translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1520&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@baloneysandwiches added a hasClass method (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1464&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mynameisstephen fixed an issue where slider event listeners were not being cleaned up (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1475&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@alexrqs cleaned up the Spanish translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1494&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@t2y added a Japanese translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1497&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@chikathreesix fixed an issue where data-setup options could be missed (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1514&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@seniorflexdeveloper added new translations and translation updates (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1530&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@chikathreesix exported the videojs.Flash.embed method (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1533&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@doublex fixed an issue with IE7 backwards compatibility (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1542&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mmcc made it possible to override the font-size of captions and subtitles (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1547&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@philipgiuliani added an Italian translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1550&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@twentyrogersc fixed the return value when setting the poster source (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1552&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@heff updated to swf v4.5.0 to fix event issues (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1554&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@rpless made the VolumeMenuButton volume more accesible via tab navigation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1519&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mmcc added support for audio tags (html5 audio only) (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1540&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/gKkF36A9CFY&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML5-Audio-support&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-9-Now-can-join-the-party/#HTML5-Audio-support&quot; class=&quot;headerlink&quot; title=&quot;HTML5 Audio 
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>Video.js 4.8.0 released...Prost!</title>
    <link href="https://videojs.github.io/blog/Video-js-4-8-0-released-Prost/"/>
    <id>https://videojs.github.io/blog/Video-js-4-8-0-released-Prost/</id>
    <published>2014-09-03T20:50:09.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;This isn&amp;rsquo;t the flashiest minor release ever, but it&amp;rsquo;s hot off the press and ready for use. As mentioned in the last (few) release posts, we&amp;rsquo;re making a concerted effort to be more consistent with releases, so hopefully the trend of bite-sized, scheduled releases will continue.&lt;/p&gt;
&lt;h3 id=&quot;Translations&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-8-0-released-Prost/#Translations&quot; class=&quot;headerlink&quot; title=&quot;Translations&quot;&gt;&lt;/a&gt;Translations&lt;/h3&gt;&lt;p&gt;We only just released localization with &lt;a href=&quot;/blog/Video-js-4-8-0-released-Prost//post/93989313276/video-js-v4-7-0-built-mostly-by-new-contributors&quot;&gt;version 4.7&lt;/a&gt;, but we&amp;rsquo;ve already had two pull-requests for new translations! The German translation is included with this release, and you&amp;rsquo;ll find the French translation in the next patch release. If you&amp;rsquo;re fluent in another language, you can help Video.js be even more internationally accessible by submitting a &lt;a href=&quot;https://github.com/videojs/video.js/blob/master/CONTRIBUTING.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pull request&lt;/a&gt; translating just 24 words / phrases. &lt;code&gt;&amp;amp;lt;/shameless_plug&amp;amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Video-js-in-the-wild&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-8-0-released-Prost/#Video-js-in-the-wild&quot; class=&quot;headerlink&quot; title=&quot;Video.js in the wild&quot;&gt;&lt;/a&gt;Video.js in the wild&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.heavybit.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heavybit Industries&lt;/a&gt; has a speaker series they host at their office, and they&amp;rsquo;ve been kind enough to start posting these sessions online in their &lt;a href=&quot;http://www.heavybit.com/library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;library&lt;/a&gt;. The experience they&amp;rsquo;ve built using Video.js is impressive, including syncing the video progress with a transcript below the player.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.cloudup.com/STyw7zm_1R.png&quot; alt=&quot;Heavybit Screenshot&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;New-plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-8-0-released-Prost/#New-plugins&quot; class=&quot;headerlink&quot; title=&quot;New plugins&quot;&gt;&lt;/a&gt;New plugins&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SunnyLi/videojs-ass&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-ass&lt;/a&gt;: Adds Advanced SubStation Alpha subtitles support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Hussnain1/Video.js-HD-Toggle-Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-hdtoggle&lt;/a&gt;: HD button which toggles between HD and non-HD source.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Full-list-of-changes&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-8-0-released-Prost/#Full-list-of-changes&quot; class=&quot;headerlink&quot; title=&quot;Full list of changes&quot;&gt;&lt;/a&gt;Full list of changes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;@andekande added a German translation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1426&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mattosborn fixed a bug where getting the video element src would overwrite it (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1430&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@songpete fixed a bug where keyboard events were bubbling and causing additional actions (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1455&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@knabar made the inactivity timeout configurable (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1409&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@seniorflexdeveloper added language files to the distribution for including specific languages (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1453&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@gkatsev improved handling of null and NaN dimension values (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1449&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@gkatsev fixed an issue where the controls would break if Flash was initialized too quickly (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1470&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;@mmcc fixed an issue where if no playback tech was supported the error could not be caught (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1473&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/si_kAdmtIKI&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This isn&amp;rsquo;t the flashiest minor release ever, but it&amp;rsquo;s hot off the press and ready for use. As mentioned in the last (few) rel
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>Video.js v4.7.0 - Built mostly by NEW contributors! Also Google chooses Video.js</title>
    <link href="https://videojs.github.io/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/"/>
    <id>https://videojs.github.io/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/</id>
    <published>2014-08-06T18:42:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;We&amp;rsquo;re continuing to work hard on improving the contributor experience around the Video.js project and it&amp;rsquo;s paying off. Over half of the changelog is thanks to brand new contributors! Issues and pull requests are getting addressed faster than ever, and I was even allowed to give &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/speaker/104522&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a talk at OSCON&lt;/a&gt; on some of the strategies we&amp;rsquo;re using. If you&amp;rsquo;re instersted in getting involved, join the #videojs IRC room or post an issue to let us know.&lt;/p&gt;
&lt;h2 id=&quot;Google-Chooses-Video-js-for-Google-Media-Framework&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#Google-Chooses-Video-js-for-Google-Media-Framework&quot; class=&quot;headerlink&quot; title=&quot;Google Chooses Video.js for Google Media Framework&quot;&gt;&lt;/a&gt;Google Chooses Video.js for Google Media Framework&lt;/h2&gt;&lt;p&gt;Google recently &lt;a href=&quot;http://googleadsdeveloper.blogspot.com/2014/07/google-media-framework-making-online.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;announced a new framework&lt;/a&gt; for building video experiences and monetization. There are versions of the framework for native iOS and Android apps, and for the browser they chose to use Video.js. Check out &lt;a href=&quot;https://github.com/googleads/videojs-ima&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;their video.js plugin&lt;/a&gt;, and as it says in their announcement, &amp;ldquo;Stay tuned as well for a deeper dive into Video.js with IMA soon!&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&quot;Localization&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#Localization&quot; class=&quot;headerlink&quot; title=&quot;Localization&quot;&gt;&lt;/a&gt;Localization&lt;/h2&gt;&lt;p&gt;In this release we&amp;rsquo;ve built the infrastructure for displaying text in other languages. Examples of text include error messages and text used for accessibility. This feature can extend to plugins as well.&lt;/p&gt;
&lt;p&gt;Today you can include other languages by including the JSON translations object from the language you want with the player, like in this example for Spanish (es).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;videojs.options.languages[&amp;#39;es&amp;#39;] = { [translations object] }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can find translations files in &lt;a href=&quot;https://github.com/videojs/video.js/tree/master/lang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the lang folder&lt;/a&gt; of the project. We don&amp;rsquo;t have many translations yet, but we&amp;rsquo;re looking for translators if you&amp;rsquo;d like to help!&lt;/p&gt;
&lt;h2 id=&quot;Multiple-buffered-regions&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#Multiple-buffered-regions&quot; class=&quot;headerlink&quot; title=&quot;Multiple buffered regions&quot;&gt;&lt;/a&gt;Multiple buffered regions&lt;/h2&gt;&lt;p&gt;With HTML5 video you can skip ahead in the video and the browser will start downloading the part of the file needed for the new position, which is different from how Flash video works by default. Flash will download from the start to the end of the file so you can only skip ahead once it has download that part of the video.&lt;/p&gt;
&lt;p&gt;In the HTML5 video API we&amp;rsquo;re given the &lt;code&gt;buffered&lt;/code&gt; property which returns a list of time ranges that the browser has downloaded data for. Early on in HTML5 video, browsers only ever reported one time range, but now we have a direct view of what&amp;rsquo;s been downloaded.&lt;/p&gt;
&lt;p&gt;In the newest version of the video.js skin you can see the specific regions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://67.media.tumblr.com/1420d1b8ee1c54b4eb876b95a5417fd7/tumblr_inline_n9usu442h91qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve kept it subtle so it&amp;rsquo;s not too big of a change. We&amp;rsquo;d love to hear your thoughts on it.&lt;/p&gt;
&lt;h2 id=&quot;DASH-Everywhere-ish&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#DASH-Everywhere-ish&quot; class=&quot;headerlink&quot; title=&quot;DASH Everywhere-ish&quot;&gt;&lt;/a&gt;DASH Everywhere-ish&lt;/h2&gt;&lt;p&gt;If you haven&amp;rsquo;t seen it yet, check out &lt;a href=&quot;http://blog.videojs.com/post/92536319027/dash-everywhere-ish-hack-project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the post&lt;/a&gt; on Tom Johson&amp;rsquo;s work getting DASH supported in Video.js, using Flash or the new Media Source Extensions. MPEG-DASH is an adaptive streaming format that Netflix and YouTube are using to stream video to cutting-edge browsers. It has the potential to replace Apple&amp;rsquo;s HTTP Live Streaming format as the main format used for adaptive streaming.&lt;/p&gt;
&lt;h2 id=&quot;Video-js-on-Conan&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#Video-js-on-Conan&quot; class=&quot;headerlink&quot; title=&quot;Video.js on Conan!&quot;&gt;&lt;/a&gt;Video.js on Conan!&lt;/h2&gt;&lt;p&gt;Conan O’Brien&amp;rsquo;s TeamCoco site is using Video.js with a nicely customized skin and ads integration. &lt;a href=&quot;http://teamcoco.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Check it out!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://teamcoco.com/video/conan-dave-franco-tinder-remote&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://65.media.tumblr.com/383082cd857bce0c6abc825e0f4878a8/tumblr_inline_n9utibJ00S1qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;New-Skin-by-Cabin&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#New-Skin-by-Cabin&quot; class=&quot;headerlink&quot; title=&quot;New Skin by Cabin&quot;&gt;&lt;/a&gt;New Skin by Cabin&lt;/h2&gt;&lt;p&gt;The team at &lt;a href=&quot;http://madebycabin.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cabin&lt;/a&gt; put together a simple and clean &lt;a href=&quot;https://github.com/cabin/videojs-sublime-skin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;new skin for video.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://67.media.tumblr.com/484bf82546666982023e64d49d4a6096/tumblr_inline_n9usohnTgG1qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;New-Plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#New-Plugins&quot; class=&quot;headerlink&quot; title=&quot;New Plugins&quot;&gt;&lt;/a&gt;New Plugins&lt;/h2&gt;&lt;p&gt;A lot of great new plugins have been released!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/googleads/videojs-ima&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-ima&lt;/a&gt;: Easily integrate the Google IMA SDK into Video.js to enable advertising on your video content.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/space87/videojs-BrightCove-tracking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-brightcoveAnyaltics&lt;/a&gt;: Allow tracking of views/impressions &amp;amp; engagement data in videojs for Brightcove videos&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Mewte/videojs-logobrand&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-logobrand&lt;/a&gt;: Add a logo/brand image to the player that appears/disappears with the controls. (also useful as a basic plugin template for learning how Video.JS plugins work.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aervans/videojs-seek&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-seek&lt;/a&gt;: Seeks to a specific time point specified by a query string parameter.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dirkjanm/videojs-preroll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-preroll&lt;/a&gt;: Simple preroll plugin that displays an advertisement before the main video&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/erasche/videojs-framebyframe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-framebyframe&lt;/a&gt;: Adds buttons for stepping through a video frame by frame&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CharlotteDunois/videojs-loopbutton&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-loopbutton&lt;/a&gt;: Adds a loop button to the player&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Catofes/videojsABdm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-ABdm&lt;/a&gt;: Use CommentCoreLibrary to show comments (which is called as DanMu) during playing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ctd1500/videojs-hotkeys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-hotkeys&lt;/a&gt;: A plugin for Video.js that enables keyboard hotkeys when the player has focus.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;New-Release-Schedule&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#New-Release-Schedule&quot; class=&quot;headerlink&quot; title=&quot;New Release Schedule&quot;&gt;&lt;/a&gt;New Release Schedule&lt;/h2&gt;&lt;p&gt;As part of improving the contributor experience we&amp;rsquo;re moving to scheduled releases. We&amp;rsquo;ll now put out a release every other Tuesday as long as there&amp;rsquo;s new changes to release. This will help give everyone a better idea of when specific features and fixes will become available.&lt;/p&gt;
&lt;h2 id=&quot;Full-list-from-the-change-log&quot;&gt;&lt;a href=&quot;/blog/Video-js-v4-7-0-Built-mostly-by-NEW-contributors-Also-Google-chooses-Video-js/#Full-list-from-the-change-log&quot; class=&quot;headerlink&quot; title=&quot;Full list from the change log&quot;&gt;&lt;/a&gt;Full list from the change log&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Added cross-browser isArray for cross-frame support. fixes #1195 (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1218&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed support for webvtt chapters. Fixes #676. (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1221&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed issues around webvtt cue time parsing. Fixed #877, fixed #183. (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1236&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an IE11 issue where clicking on the video wouldn&amp;rsquo;t show the controls (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1291&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a composer.json for PHP packages (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1241&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exposed the vertical option for slider controls (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1303&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an error when disposing a tech using manual timeupdates (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1312&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported missing Player API methods (remainingTime, supportsFullScreen, enterFullWindow, exitFullWindow, preload) (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1328&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a base for running saucelabs tests from grunt (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1215&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added additional browsers for saucelabs testing (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1216&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added support for listening to multiple events through a types array (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1231&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported the vertical option for the volume slider (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1378&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed Component trigger function arguments and docs (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1310&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Now copying all attributes from the original video tag to the generated video element (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1321&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added files to be ignored in the bower.json (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1337&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an error that could happen if Flash was diposed before the ready callback was fired (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1340&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The up and down arrows can now be used to control sliders in addition to left and right (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1345&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a player.currentType() function to get the MIME type of the current source (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1320&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a potential conflict with other event listener shims (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1363&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added support for multiple time ranges in the load progress bar (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1253&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added vjs-waiting and vjs-seeking css classnames and updated the spinner to use them (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1351&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Now restoring the original video tag attributes on a tech change to support webkit-playsinline (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1369&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue where the user was unable to scroll/zoom page if touching the video (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1373&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added &amp;ldquo;sliding&amp;rdquo; class for when slider is sliding to help with handle styling (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1385&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-heff&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/videojs/status/497112744500285440&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Discuss on Twitter&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=8144578&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Discuss on Hacker News&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/xPnVQ6QJIk0&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;We&amp;rsquo;re continuing to work hard on improving the contributor experience around the Video.js project and it&amp;rsquo;s paying off. Over h
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>DASH Everywhere-ish (hack project)</title>
    <link href="https://videojs.github.io/blog/DASH-Everywhere-ish-hack-project/"/>
    <id>https://videojs.github.io/blog/DASH-Everywhere-ish-hack-project/</id>
    <published>2014-07-22T15:01:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;A couple of times a year Brightcove has an internal hackweek where engineers work on any project they&amp;rsquo;d like. In the latest hackweek (2014-07-14) &lt;a href=&quot;https://github.com/seniorflexdeveloper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tom Johnson&lt;/a&gt; decided to see if he could get DASH supported in as many places as possible, by combining a few of the existing DASH player implementations with Video.js.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dashif.org/mpeg-dash/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MPEG-DASH&lt;/a&gt; (Dynamic Adaptive Streaming over HTTP) is a streaming format similar to Apple&amp;rsquo;s &lt;a href=&quot;https://developer.apple.com/streaming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP Live Streaming (HLS)&lt;/a&gt;. It allows you to provide multiple versions of a video at different bitrates, and then the player can switch between those versions depending on the user&amp;rsquo;s bandwidth (which is more complicated than you might think).&lt;/p&gt;
&lt;p&gt;The two DASH playback implementations used were &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dash.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/castlabs/dashas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dash.as&lt;/a&gt;. They were combined using video.js&amp;rsquo;s playback tech architecture, which means you can include &lt;a href=&quot;https://github.com/videojs/video.js/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plugins&lt;/a&gt; and custom skins and they&amp;rsquo;ll work the same with either playback method.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mixxture.com/players/brightcove/dash/demo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;See the results.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Browser-Device-Coverage&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Browser-Device-Coverage&quot; class=&quot;headerlink&quot; title=&quot;Browser/Device Coverage&quot;&gt;&lt;/a&gt;Browser/Device Coverage&lt;/h3&gt;&lt;p&gt;Using a combination of DASH.AS and DASH.JS will give us the following browser/device coverage:&lt;/p&gt;
&lt;h4 id=&quot;DASH-JS-media-source-extensions-support&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#DASH-JS-media-source-extensions-support&quot; class=&quot;headerlink&quot; title=&quot;DASH.JS (media source extensions support)&quot;&gt;&lt;/a&gt;DASH.JS (media source extensions support)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Internet Explorer: 11+&lt;/li&gt;
&lt;li&gt;Chrome: 23+&lt;/li&gt;
&lt;li&gt;FireFox: 25+ (upcoming version)&lt;/li&gt;
&lt;li&gt;Safari (Desktop): 8+ (OSX Yosemite - Fall 2014)&lt;/li&gt;
&lt;li&gt;iOS: No&lt;/li&gt;
&lt;li&gt;Android: 4.2+ (Chrome)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;DASH-AS&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#DASH-AS&quot; class=&quot;headerlink&quot; title=&quot;DASH.AS&quot;&gt;&lt;/a&gt;DASH.AS&lt;/h4&gt;&lt;p&gt;Fallback to any environment that supports Flash Player 10.3&lt;/p&gt;
&lt;h3 id=&quot;iOS&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#iOS&quot; class=&quot;headerlink&quot; title=&quot;iOS&quot;&gt;&lt;/a&gt;iOS&lt;/h3&gt;&lt;p&gt;As you can see, the one remaining holdout is iOS and there&amp;rsquo;s currently no word when or if that will happen. Seeing media source extensions support in Safari 8 gives some hope, but my understanding is the requirements for getting support built into iOS are much more significant. My guess is it will happen eventually, but not for a while (and hopefully in-line playback + the fullscreen API will be supported at the same time).&lt;/p&gt;
&lt;p&gt;Today, to provide adaptive streaming everywhere, you still need either DASH + HLS, or just HLS (you can use the &lt;a href=&quot;https://github.com/videojs/videojs-contrib-hls&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;video.js HLS plugin&lt;/a&gt; to support HLS in more browsers).&lt;/p&gt;
&lt;h2 id=&quot;Tom-rsquo-s-Notes&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Tom-rsquo-s-Notes&quot; class=&quot;headerlink&quot; title=&quot;Tom&amp;rsquo;s Notes&quot;&gt;&lt;/a&gt;Tom&amp;rsquo;s Notes&lt;/h2&gt;&lt;p&gt;The demo shows that for environments which support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaSource&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Media Source Extensions&lt;/a&gt; (MSE) we use a full Javscript implementation via &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dash.js&lt;/a&gt; and as a fallback we use Flash built around &lt;a href=&quot;http://sourceforge.net/adobe/osmf/home/Home/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OSMF&lt;/a&gt; and &lt;a href=&quot;https://github.com/castlabs/dashas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dash.as&lt;/a&gt;, an open-source plugin provided by &lt;a href=&quot;http://castlabs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Castlabs&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tom has been working on &lt;a href=&quot;https://github.com/seniorflexdeveloper/videojs-osmf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-osmf&lt;/a&gt; on the side, which helped make this possible.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;DASH-AS-Requirements&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#DASH-AS-Requirements&quot; class=&quot;headerlink&quot; title=&quot;DASH.AS Requirements&quot;&gt;&lt;/a&gt;DASH.AS Requirements&lt;/h3&gt;&lt;h4 id=&quot;Player&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Player&quot; class=&quot;headerlink&quot; title=&quot;Player&quot;&gt;&lt;/a&gt;Player&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Environment must support Flash Player 10.3+&lt;/li&gt;
&lt;li&gt;Video.js OSMF Tech (&lt;a href=&quot;https://github.com/seniorflexdeveloper/videojs-osmf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-osmf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;CastLabs Dash.AS plugin for OSMF (&lt;a href=&quot;https://github.com/castlabs/dashas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dash.as&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Server-Host&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Server-Host&quot; class=&quot;headerlink&quot; title=&quot;Server/Host&quot;&gt;&lt;/a&gt;Server/Host&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Since the requests are fired from within Flash, a crossdomain.xml file is required.*   Ability to serve byte range requests via query string (myFile.mp4?range=0-1000 || myFile.m4s?bytes=0-1000) is necessary because Flash Player restricts use of the ‘Range’ request header. Castlabs has an .htaccess file which uses mod_rewrite to achieve this. Akamai edge servers accept the bytes query string var as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Notes&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Notes&quot; class=&quot;headerlink&quot; title=&quot;Notes&quot;&gt;&lt;/a&gt;Notes&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Something we may want to modify is handling the request/response portions of the workload outside of the Flash Player similar to the Video.js HLS solution. This would remove the need for having a crossdomain.xml, which cannot be normally expected to exist in a DASH focused environment.&lt;/li&gt;
&lt;li&gt;Akamai edgesuite appear to be an exception to the above rule, as those domains do in fact have the crossdomain from it’s use as a serving platform under Akamai HD. The Akamai param syntax is ‘myFile.m4s?bytes=XXXX-YYYY’.&lt;/li&gt;
&lt;li&gt;In it’s current form the Dash.AS manifest parser is very rigid. We may want to look into implementing a version of the DASH.JS manifest parsing on the AS side, as it is a lot more flexible in terms of structure recognition.&lt;/li&gt;
&lt;li&gt;Deeper class inspection shows that the Dash.AS plugin is based on using Netstream in data generation mode, similar to our HLS solution. There may be better way to share the codebase between the two to reduce code duplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DASH-JS-Requirements&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#DASH-JS-Requirements&quot; class=&quot;headerlink&quot; title=&quot;DASH.JS Requirements&quot;&gt;&lt;/a&gt;DASH.JS Requirements&lt;/h3&gt;&lt;h4 id=&quot;Player-1&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Player-1&quot; class=&quot;headerlink&quot; title=&quot;Player&quot;&gt;&lt;/a&gt;Player&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Environment must support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaSource&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Media Source Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DASH Industry Forum DASH.JS library (&lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dash.js&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Video.js Dash.js Tech (&lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/blob/development/contrib/videojs/videojs-tech-dashjs.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-tech-dashjs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Server-Host-1&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Server-Host-1&quot; class=&quot;headerlink&quot; title=&quot;Server/Host&quot;&gt;&lt;/a&gt;Server/Host&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Open CORS headers: Access-Control-Allow-Origin: *&lt;/li&gt;
&lt;li&gt;Accept use of the Range request header: Access-Control-Allow-Headers:Range, Options&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Notes-1&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Notes-1&quot; class=&quot;headerlink&quot; title=&quot;Notes&quot;&gt;&lt;/a&gt;Notes&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Dash.js MPD parsing is significantly more robust in comparison to the Dash.AS solution.&lt;/li&gt;
&lt;li&gt;Most streams tested are Akamai based, we should probably try more local and non-Akamai hosted options moving forward.*   In my testing I did see a Youtube DASH/MSE example, and those streams were confirmed to work within Dash.JS as well.&lt;/li&gt;
&lt;li&gt;Dash.JS streaming lifecycle and segment loading lifecycle tend to be directly coupled and don’t necessarily fire the element media events at the time expected. For example is duration. While known at the parse complete stage of the manifest load cycle, is not reported to the player until the first of the segments is received.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Tech-Compatibility&quot;&gt;&lt;a href=&quot;/blog/DASH-Everywhere-ish-hack-project/#Tech-Compatibility&quot; class=&quot;headerlink&quot; title=&quot;Tech Compatibility&quot;&gt;&lt;/a&gt;Tech Compatibility&lt;/h3&gt;&lt;p&gt;The independant techs work well together. A slight modification had to be made to the Dash.AS library to insure that it only checked for resources which 1. had a URL and 2. url contained the file extension of either ‘mpd’ or ‘m4s’ for DASH manifests/segments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Dash.JS tech should be loaded into DOM prior to OSMF tech to insure the OSMF tech is the fallback scenario for DASH playback.&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/Wn1NGaDuYmo&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;A couple of times a year Brightcove has an internal hackweek where engineers work on any project they&amp;rsquo;d like. In the latest hackwee
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
      <category term="html5 video" scheme="https://videojs.github.io/blog/tags/html5-video/"/>
    
  </entry>
  
  <entry>
    <title>Video.js version 4.6.0 released! It&#39;s been a productive month.</title>
    <link href="https://videojs.github.io/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/"/>
    <id>https://videojs.github.io/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/</id>
    <published>2014-05-20T21:29:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;The video.js community has been in full force lately and it&amp;rsquo;s resulted in a lot of great features and fixes, including UI updates, better error messages, and even a &lt;a href=&quot;https://github.com/addyosmani/video-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Video.js Polymer element&lt;/a&gt; built by &lt;a href=&quot;https://twitter.com/addyosmani&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Addy Osmani&lt;/a&gt; himself.&lt;/p&gt;
&lt;h3 id=&quot;New-Live-UI&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/#New-Live-UI&quot; class=&quot;headerlink&quot; title=&quot;New Live UI&quot;&gt;&lt;/a&gt;New Live UI&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://66.media.tumblr.com/18c6ec3dd9a1e04440345bf5ca6630f9/tumblr_inline_n5ue8gvi1Y1qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Video.js has supported different forms of live video for a while, but a recent update has made the user experience a little clearer. Specifically, a &amp;lsquo;LIVE&amp;rsquo; badge is added to the controls and the seek bar is hidden when seeking isn&amp;rsquo;t permitted.&lt;/p&gt;
&lt;h3 id=&quot;Clearer-Errors&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/#Clearer-Errors&quot; class=&quot;headerlink&quot; title=&quot;Clearer Errors&quot;&gt;&lt;/a&gt;Clearer Errors&lt;/h3&gt;&lt;p&gt;A big effort went into improving error situations that developers and viewers might encounter. In cases where the viewer&amp;rsquo;s browser supports neither JavaScript nor HTML5 Video, a more helpful message is shown that informs the viewer how they can support video playback.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://66.media.tumblr.com/ce08d85f3a1538eecd1d58eccddaa0b6/tumblr_inline_n5ue7u9l4H1qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;In cases where a common media error occurs (e.g. the file doesn&amp;rsquo;t exist or the network fails), an &amp;ldquo;X&amp;rdquo; icon is displayed showing that playback can&amp;rsquo;t continue, and a message is shown describing the issue. Additionally an error message is logged to the javascript console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://67.media.tumblr.com/72b11aeeab66657ec39c09366bd19f0e/tumblr_inline_n5ue8z9ZFH1qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;For developers, better logging functions have been added including &lt;code&gt;videojs.log.error()&lt;/code&gt;, and they&amp;rsquo;re being used throughout the code base to provide better information and help track down issues.&lt;/p&gt;
&lt;h3 id=&quot;IE11-Fullscreen&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/#IE11-Fullscreen&quot; class=&quot;headerlink&quot; title=&quot;IE11 Fullscreen&quot;&gt;&lt;/a&gt;IE11 Fullscreen&lt;/h3&gt;&lt;p&gt;Video.js relies on native browser fullscreen even when Flash is used. IE11 is the first version of Internet Explorer to support native browser fullscreen, and video.js has now been updated to take advantage of that feature and provide a better fullscreen experience for those users.&lt;/p&gt;
&lt;h3 id=&quot;Playback-Rate-Switching&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/#Playback-Rate-Switching&quot; class=&quot;headerlink&quot; title=&quot;Playback Rate Switching&quot;&gt;&lt;/a&gt;Playback Rate Switching&lt;/h3&gt;&lt;p&gt;If you ever wanted to speed up or slow down the rate of a video, now you can! HTML5 video browsers have been adding support for playback rate switching, and video.js now has an optional UI component that will let you select the speed. Flash however does not support playback rate switching, so unfortunately it&amp;rsquo;s not a feature that users on older browsers (e.g. IE8) can use.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/vikun/1/edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;See a demo.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;New-community-plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/#New-community-plugins&quot; class=&quot;headerlink&quot; title=&quot;New community plugins&quot;&gt;&lt;/a&gt;New community plugins&lt;/h3&gt;&lt;p&gt;The latest plugins to be added to the &lt;a href=&quot;https://github.com/videojs/video.js/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;video.js plugins list&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slawrence/videojs-vr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-vr&lt;/a&gt;: Project video onto different geometric shapes (Sphere, Cube, Cylinder) and view in 3d with optional Oculus Rift support&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicetip/videojs-speed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;video-speed&lt;/a&gt;: Adds customizable video-speed control&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CtrHellenicStudies/OpenVideoAnnotation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenVideoAnnotation&lt;/a&gt; - create annotations in video-js using annotator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brightcove/videojs-overlay&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-overlay&lt;/a&gt;: display simple HTML overlays during video playback&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/addyosmani/video-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;video.js-polymer&lt;/a&gt;: A video.js element for the Polymer web components framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d like a head-start on the scaffolding for a new video.js plugin, check out the &lt;a href=&quot;https://github.com/dmlap/generator-videojs-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeoman video.js plugin generator&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Full-list-from-the-change-log&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-6-0-released-It-s-been-a-productive-month/#Full-list-from-the-change-log&quot; class=&quot;headerlink&quot; title=&quot;Full list from the change log&quot;&gt;&lt;/a&gt;Full list from the change log&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Updated the UI to support live video (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1121&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The UI now resets after a source change (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1124&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Now assuming smart CSS defaults for sliders to prevent reflow on player init (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1122&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed the title element placement in menus (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1114&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed title support for menu buttons (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1128&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed extra mousemove events on Windows caused by certain apps, not users (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1068&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed error due to undefined tech when no source is supported (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1172&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed the progress bar not finishing when manual timeupdate events are used (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1173&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a more informative and styled fallback message for non-html5 browsers (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1181&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added the option to provide an array of child components instead of an object (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1093&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed casing on webkitRequestFullscreen (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1101&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Made tap events on mobile less sensitive to touch moves (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1111&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed the default flag for captions/subtitles tracks (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1153&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed compilation failures with LESS v1.7.0 and GRUNT v0.4.4 (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1180&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added better error handling across the library (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1197&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Updated captions/subtiles file fetching to support cross-origin requests in older IE browsers (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1095&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added support for playback rate switching (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1132&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue with the loadstart event order that caused the big play button to not hide (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1209&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Modernized the fullscreen API and added support for IE11 (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1205&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added cross-browser testing with SauceLabs, and added Karma as the default test runner (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1187&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed saucelabs integration to run on commits in TravisCI (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1214&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a clearer error message when a tech is undefined (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1210&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a cog icon to the font icons (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1211&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a player option to offset the subtitles/captions timing (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1212&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new version is available on &lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs.com&lt;/a&gt; and  has been added to the CDN.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-&lt;a href=&quot;http://blog.heff.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;heff&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/Ho_lv_Coqlc&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The video.js community has been in full force lately and it&amp;rsquo;s resulted in a lot of great features and fixes, including UI updates, 
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Video.js version 4.5.0 released! Nothing to see here, move along</title>
    <link href="https://videojs.github.io/blog/Video-js-version-4-5-0-released-Nothing-to-see-here-move-along/"/>
    <id>https://videojs.github.io/blog/Video-js-version-4-5-0-released-Nothing-to-see-here-move-along/</id>
    <published>2014-03-27T22:49:04.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Well, sort of… this release is the result of a lot of hard work to speed up the version release process, meaning they&amp;rsquo;ll be coming a lot faster now with smaller sets of changes.&lt;/p&gt;
&lt;p&gt;In this release we&amp;rsquo;ve added support for the &lt;a href=&quot;http://component.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Component(1)&lt;/a&gt; package manager, fixed the captions positioning when the controls are hidden, and helped Android devices know when they can support HLS. ;-) There were a few other changes as well but a lot of the work this round was done on the processes around the project. If you&amp;rsquo;ve spent time in the github issues, you&amp;rsquo;ll hopefully notice an improvement in the response rate on issues and the speed in which bugs get fixed.&lt;/p&gt;
&lt;h3 id=&quot;New-plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-5-0-released-Nothing-to-see-here-move-along/#New-plugins&quot; class=&quot;headerlink&quot; title=&quot;New plugins&quot;&gt;&lt;/a&gt;New plugins&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/theonion/videojs-vast-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-vast&lt;/a&gt;: A VideoJS plugin to play pre-roll videos from a VAST feed&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brandonaaskov/videojs-comscore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-comscore&lt;/a&gt;: Reports to comScore using their latest Streaming Tag SDK&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Video-js-in-the-wild&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-5-0-released-Nothing-to-see-here-move-along/#Video-js-in-the-wild&quot; class=&quot;headerlink&quot; title=&quot;Video.js in the wild&quot;&gt;&lt;/a&gt;Video.js in the wild&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.toyota-europe.com/cars/new_cars/yaris/index.tmex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toyota Europe!&lt;/a&gt; (click a video on that page) I was in Paris a few weeks ago and stopped by the Toyota store on Champs-Elysées. Next to the cars are multimedia touch screens that tell you details and allow you to watch videos. The video player looked kind of familiar, and sure enough it was video.js with a very nice custom skin. It turns out the Toyota Europe website uses video.js as well. Very cool.&lt;/p&gt;
&lt;p&gt;If you find video.js on an interesting site somewhere, let us know in the comments.&lt;/p&gt;
&lt;h2 id=&quot;Full-list-from-the-change-log&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-5-0-released-Nothing-to-see-here-move-along/#Full-list-from-the-change-log&quot; class=&quot;headerlink&quot; title=&quot;Full list from the change log&quot;&gt;&lt;/a&gt;Full list from the change log&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Added component(1) support (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1032&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Captions now move down when controls are hidden (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1053&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added the .less source file to the distribution files (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1056&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Changed src() to return the current selected source (&lt;a href=&quot;https://github.com/videojs/video.js/pull/968&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a grunt task for opening the next issue that needs addressing (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1059&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed Android 4.0+ devices&amp;rsquo; check for HLS support (&lt;a href=&quot;https://github.com/videojs/video.js/pull/1084&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new version is available on &lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs.com&lt;/a&gt; and  has been added to the CDN.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/GpehQHGlbCM&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Well, sort of… this release is the result of a lot of hard work to speed up the version release process, meaning they&amp;rsquo;ll be coming 
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Video.js version 4.4.0 released - Now supporting RequireJS and Browserify</title>
    <link href="https://videojs.github.io/blog/Video-js-version-4-4-0-released-Now-supporting-RequireJS-and-Browserify/"/>
    <id>https://videojs.github.io/blog/Video-js-version-4-4-0-released-Now-supporting-RequireJS-and-Browserify/</id>
    <published>2014-02-19T22:49:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Version 4.4.0 is here with over 20 updates and fixes. The most notable addition may be support for AMD and CommonJS module loaders, meaning you can now include Video.js using &lt;a href=&quot;http://requirejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RequireJS&lt;/a&gt; or &lt;a href=&quot;http://browserify.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt;. Video.js can be installed through &lt;a href=&quot;http://www.npmjs.org/package/video.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt; already, and we&amp;rsquo;ll soon add support for &lt;a href=&quot;http://bower.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bower&lt;/a&gt; and &lt;a href=&quot;http://component.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;component(1)&lt;/a&gt; as well.&lt;/p&gt;
&lt;h3 id=&quot;New-plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-4-0-released-Now-supporting-RequireJS-and-Browserify/#New-plugins&quot; class=&quot;headerlink&quot; title=&quot;New plugins&quot;&gt;&lt;/a&gt;New plugins&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/videojs/video.js/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plugin list&lt;/a&gt; continues to grow, with more in the works. Checkout the new &lt;a href=&quot;http://theonion.github.io/videojs-endcard/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;endcard plugin&lt;/a&gt; built by &lt;a href=&quot;http://www.theonion.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Onion&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spchuang/videojs-markers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-markers&lt;/a&gt; &lt;a href=&quot;http://jsbin.com/befob/7/edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[demo]&lt;/a&gt; - Add customizable markers on the progress bar&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/several27/videojs-youtube-videowall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-youtube-videowall&lt;/a&gt; - &lt;a href=&quot;http://jsbin.com/tave/3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[demo]&lt;/a&gt; - Display video wall of related youtube videos after the video finishes&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://theonion.github.io/videojs-endcard/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-endcard&lt;/a&gt; - Simple, customizable end card solution for VideoJS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rsadwick/videojs-akamai-analytics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-akamai-analytics&lt;/a&gt; - Akamai Sola Analytics for video.js&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cladera/videojs-stereopanner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs-stereopanner&lt;/a&gt; - Adds stereo channel panning functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Video-js-in-the-wild&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-4-0-released-Now-supporting-RequireJS-and-Browserify/#Video-js-in-the-wild&quot; class=&quot;headerlink&quot; title=&quot;Video.js in the wild&quot;&gt;&lt;/a&gt;Video.js in the wild&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://play.brightcove.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brightcove Play 2014&lt;/a&gt; website recently went live with Video.js as the player. We&amp;rsquo;re also hard at work building Brightcove&amp;rsquo;s next-gen player with Video.js at the core, so stay tuned.&lt;/p&gt;
&lt;h2 id=&quot;Full-list-from-the-changelog&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-4-0-released-Now-supporting-RequireJS-and-Browserify/#Full-list-from-the-changelog&quot; class=&quot;headerlink&quot; title=&quot;Full list from the changelog&quot;&gt;&lt;/a&gt;Full list from the changelog&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Made the poster updateable after initialization (&lt;a href=&quot;https://github.com/videojs/video.js/pull/838&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported more textTrack functions (&lt;a href=&quot;https://github.com/videojs/video.js/pull/815&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Moved player ID generation to support video tags with no IDs (&lt;a href=&quot;https://github.com/videojs/video.js/pull/845&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Moved to using QUnit as a dependency (&lt;a href=&quot;https://github.com/videojs/video.js/pull/850&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added the util namespace for public utility functions (&lt;a href=&quot;https://github.com/videojs/video.js/pull/862&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue with calling duration before Flash is loaded (&lt;a href=&quot;https://github.com/videojs/video.js/pull/861&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added player methods to externs so they can be overridden (&lt;a href=&quot;https://github.com/videojs/video.js/pull/878&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed html5 playback when switching between media techs (&lt;a href=&quot;https://github.com/videojs/video.js/pull/887&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed Firefox+Flash mousemove events so controls don&amp;rsquo;t hide permanently (&lt;a href=&quot;https://github.com/videojs/video.js/pull/899&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a test for touch detection (&lt;a href=&quot;https://github.com/videojs/video.js/pull/962&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Updated the src file list for karma tests (&lt;a href=&quot;https://github.com/videojs/video.js/pull/948&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added more tests for API properties after minification (&lt;a href=&quot;https://github.com/videojs/video.js/pull/906&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Updated projet to use npm version of videojs-swf (&lt;a href=&quot;https://github.com/videojs/video.js/pull/930&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added support for dist zipping on windows (&lt;a href=&quot;https://github.com/videojs/video.js/pull/944&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed iOS fullscreen issue (&lt;a href=&quot;https://github.com/videojs/video.js/pull/977&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed touch event bubbling (&lt;a href=&quot;https://github.com/videojs/video.js/pull/992&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed ARIA role attribute for button and slider (&lt;a href=&quot;https://github.com/videojs/video.js/pull/988&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed and issue where a component&amp;rsquo;s dispose event would bubble up (&lt;a href=&quot;https://github.com/videojs/video.js/pull/981&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Quieted down deprecation warnings (&lt;a href=&quot;https://github.com/videojs/video.js/pull/971&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update seek handle to display the current time (&lt;a href=&quot;https://github.com/videojs/video.js/pull/902&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added requirejs and browserify support (UMD) (&lt;a href=&quot;https://github.com/videojs/video.js/pull/998&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new version is available on &lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs.com&lt;/a&gt; and  has been added to the CDN.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/ZZPGdmp690s&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Version 4.4.0 is here with over 20 updates and fixes. The most notable addition may be support for AMD and CommonJS module loaders, meani
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Video.js version 4.3.0 released w/ shiny new API docs</title>
    <link href="https://videojs.github.io/blog/Video-js-version-4-3-0-released-w-shiny-new-API-docs/"/>
    <id>https://videojs.github.io/blog/Video-js-version-4-3-0-released-w-shiny-new-API-docs/</id>
    <published>2013-11-06T00:29:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;The biggest change in this update is actually an overhaul of the &lt;a href=&quot;https://github.com/videojs/video.js/tree/v4.3.0/docs/api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API docs&lt;/a&gt;. The best example of the new docs is the &lt;a href=&quot;https://github.com/videojs/video.js/blob/v4.3.0/docs/api/vjs.Player.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Player doc&lt;/a&gt;, which is the API most video.js users will work with.&lt;/p&gt;
&lt;p&gt;The new docs are now automatically generated from the code and code comments, making it easier to keep them up to date with what&amp;rsquo;s currently in the codebase.&lt;/p&gt;
&lt;p&gt;One interesting note about the doc-generator is that it uses &lt;a href=&quot;http://esprima.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;esprima&lt;/a&gt;, a tool that reads javascript files and gives back the &amp;ldquo;abstract syntax tree&amp;rdquo; of the code.&lt;/p&gt;
&lt;p&gt;For the following javascript:&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;
var hi;
&lt;/pre&gt;

&lt;p&gt;Esprima would generate:&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;
{
    &quot;type&quot;: &quot;Program&quot;,
    &quot;body&quot;: [
        {
            &quot;type&quot;: &quot;VariableDeclaration&quot;,
            &quot;declarations&quot;: [
                {
                    &quot;type&quot;: &quot;VariableDeclarator&quot;,
                    &quot;id&quot;: {
                        &quot;type&quot;: &quot;Identifier&quot;,
                        &quot;name&quot;: &quot;hi&quot;
                    },
                    &quot;init&quot;: null
                }
            ],
            &quot;kind&quot;: &quot;var&quot;
        }
    ]
}
&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re using the AST of the video.js codebase to generate the majority of the information in the docs, which means it requires fewer comments and less work to keep the docs really great as we continue to build. If you&amp;rsquo;re interested in seeing how we&amp;rsquo;re handling that, check out the &lt;a href=&quot;https://github.com/videojs/doc-generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;doc-generator&lt;/a&gt; repo (it&amp;rsquo;s currently only useful with the video.js codebase, but it could be extended to support more).&lt;/p&gt;
&lt;h2 id=&quot;New-CSS-Options&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-3-0-released-w-shiny-new-API-docs/#New-CSS-Options&quot; class=&quot;headerlink&quot; title=&quot;New CSS Options&quot;&gt;&lt;/a&gt;New CSS Options&lt;/h2&gt;&lt;p&gt;Additional updates include new loading spinner icon options, and a new class for centering the big play button.&lt;/p&gt;
&lt;p&gt;Many users have been clear that they&amp;rsquo;d prefer the big play button in the center of the video. While we feel the trend is still moving towards getting the play button out of the way of the content, we wanted to make this feature easier to customize. You can now use the &lt;code&gt;vjs-big-play-centered&lt;/code&gt; class on your video tag to center the play button.&lt;/p&gt;
&lt;p&gt;To try the new spinner icon options, check out the &lt;a href=&quot;http://designer.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;designer&lt;/a&gt; and change the icon name used by the spinner class.&lt;/p&gt;
&lt;h2 id=&quot;Even-more-plugins&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-3-0-released-w-shiny-new-API-docs/#Even-more-plugins&quot; class=&quot;headerlink&quot; title=&quot;Even more plugins!&quot;&gt;&lt;/a&gt;Even more plugins!&lt;/h2&gt;&lt;p&gt;Finally, the most exciting developments are actually happening in the video.js community, with more and more plugins being built. We&amp;rsquo;re up to 26 in the &lt;a href=&quot;https://github.com/videojs/video.js/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plugins list&lt;/a&gt;, with more on the way.&lt;/p&gt;
&lt;p&gt;If you have some code you&amp;rsquo;ve built on top of video.js that you think might be valuable to others, please share it on the plugins list, or post an issue on the video.js repo if you have questions about the plugin process.&lt;/p&gt;
&lt;h2 id=&quot;Full-list-from-the-changelog&quot;&gt;&lt;a href=&quot;/blog/Video-js-version-4-3-0-released-w-shiny-new-API-docs/#Full-list-from-the-changelog&quot; class=&quot;headerlink&quot; title=&quot;Full list from the changelog&quot;&gt;&lt;/a&gt;Full list from the changelog&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Added Karma for cross-browser unit testing (&lt;a href=&quot;https://github.com/videojs/video.js/pull/714&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Unmuting when the volume is changed (&lt;a href=&quot;https://github.com/videojs/video.js/pull/720&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an accessibility issue with the big play button (&lt;a href=&quot;https://github.com/videojs/video.js/pull/777&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported user activity methods (&lt;a href=&quot;https://github.com/videojs/video.js/pull/783&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added a classname to center the play button and new spinner options (&lt;a href=&quot;https://github.com/videojs/video.js/pull/784&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added API doc generation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/801&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added support for codecs in Flash mime types (&lt;a href=&quot;https://github.com/videojs/video.js/pull/805&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new version is available on &lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs.com&lt;/a&gt; and  has been added to the CDN.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/HFDZaCSgXYI&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The biggest change in this update is actually an overhaul of the &lt;a href=&quot;https://github.com/videojs/video.js/tree/v4.3.0/docs/api&quot; targe
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>The Guardian uses Video.js in feature article</title>
    <link href="https://videojs.github.io/blog/The-Guardian-uses-Video-js-in-feature-article/"/>
    <id>https://videojs.github.io/blog/The-Guardian-uses-Video-js-in-feature-article/</id>
    <published>2013-11-05T23:15:11.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;It&amp;rsquo;s always nice to find Video.js in the wild, but this &lt;a href=&quot;http://www.theguardian.com/world/interactive/2013/nov/01/snowden-nsa-files-surveillance-revelations-decoded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;article from The Guradian&lt;/a&gt; is an especially cool use case. Most of the players don&amp;rsquo;t use controls at all, but rather play/pause based on the user scrolling the page. The ones that do use controls are styled with a white on light gray theme that matches the rest of the page really well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The article begins with a full-width video that includes controls.&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://66.media.tumblr.com/14295587c4d822fd6db3a57be2b555cd/tumblr_inline_mvr6sfqy3m1qzxjzy.png&quot; alt=&quot;Big Player&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most of the videos are short dialogs that are triggered based on scrolling to a certain point in the page. These have no controls other than an external play/pause button.&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://65.media.tumblr.com/b45334a76c06433a43a13cbc375fd14b/tumblr_inline_mvr6tukViN1qzxjzy.png&quot; alt=&quot;No Controls&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Smaller player with controls.&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://67.media.tumblr.com/b7f7111f67442c0afbee754793cc5a0f/tumblr_inline_mvlmf2N5AG1qzxjzy.png&quot; alt=&quot;Small Player&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/5makkI_uMys&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;It&amp;rsquo;s always nice to find Video.js in the wild, but this &lt;a href=&quot;http://www.theguardian.com/world/interactive/2013/nov/01/snowden-n
    
    </summary>
    
    
      <category term="gallery" scheme="https://videojs.github.io/blog/tags/gallery/"/>
    
  </entry>
  
  <entry>
    <title>4.2.2 Patch Release</title>
    <link href="https://videojs.github.io/blog/4-2-2-Patch-Release/"/>
    <id>https://videojs.github.io/blog/4-2-2-Patch-Release/</id>
    <published>2013-10-15T22:26:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Two bugs have been squashed with this patch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An issue most commonly seen in Firefox where video playback would break when a race condition would occur during video loading (&lt;a href=&quot;https://github.com/videojs/video.js/issues/756&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#756&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An issue where the duration would get stuck at 0:00 when loading the player dynamically (&lt;a href=&quot;https://github.com/videojs/video.js/issues/775&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#775&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/videojs/video.js/pull/776/files&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;See the changes made&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This version can be downloaded on &lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs.com&lt;/a&gt;, is available on the CDN, and the existing /4.2/ CDN version has been  updated to 4.2.2. (may take time to propagate to your area)&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/I0mpf2qGi7g&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Two bugs have been squashed with this patch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An issue most commonly seen in Firefox where video playback would break when a 
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Running Video.js unit tests in real browsers with Karma</title>
    <link href="https://videojs.github.io/blog/Running-Video-js-unit-tests-in-real-browsers-with-Karma/"/>
    <id>https://videojs.github.io/blog/Running-Video-js-unit-tests-in-real-browsers-with-Karma/</id>
    <published>2013-09-19T03:21:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;If you’ve ever cloned the video.js repository, either to contribute or to build your own version, you’ve no doubt run the video.js unit tests. Until just recently, though, we only had support for running unit tests with grunt, using the PhantomJS browser. Well, that’s changed, with the first phase of our integration with Karma. Now, you’ll be able to run your tests in real browsers.&lt;/p&gt;
&lt;p&gt;Setting things up is a snap. After you pull down the latest from video.js and run &lt;code&gt;npm install&lt;/code&gt;, simply copy the test/karma.conf.js.example file to test/karma.conf.js, add the browsers you wish to test to the browsers array, and run &lt;code&gt;grunt karma:dev&lt;/code&gt;. That’s it. Of course, there are more options that you can configure, but if you want to get the ball rolling quickly, just add browsers, and run the tests. See the test/karma.conf.js.example file for more  instructions.&lt;/p&gt;
&lt;p&gt;For our next phases of integration, we’re planning to include support for running tests on mobile devices, as well as running these  tests in a publicly-available location, so that anyone can tell at a glance how things are going.&lt;/p&gt;
&lt;p&gt;You can learn more about Karma &lt;a href=&quot;https://npmjs.org/package/karma&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;-Jim&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/Iv1mc-5p_Og&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;If you’ve ever cloned the video.js repository, either to contribute or to build your own version, you’ve no doubt run the video.js unit t
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Unauthorized modification of Video.js CDN files</title>
    <link href="https://videojs.github.io/blog/Unauthorized-modification-of-Video-js-CDN-files/"/>
    <id>https://videojs.github.io/blog/Unauthorized-modification-of-Video-js-CDN-files/</id>
    <published>2013-09-15T15:23:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE 2013-09-19:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The CDN continues to be secure and we have taken significant steps to ensure it never falls under a similar attack again.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access to the CDN has been restricted to a few key individuals&lt;/li&gt;
&lt;li&gt;A third-party service is now monitoring changes made to the CDN&lt;/li&gt;
&lt;li&gt;Processes have been defined for responding to any such future issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The original source of this event was the &lt;a href=&quot;https://isc.sans.edu/forums/diary/Suspect+Sendori+software/16466&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sendori Auto-update Hack&lt;/a&gt;, which possibly affected millions of people including, unfortunately, an admin of the CDN.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;On the morning of September 14, 2013 at 6:25am PDST, we discovered that certain versions of video.js being served from our content delivery network (CDN) had been modified by an unknown attacker. The file was changed to contain malicious code that would attempt to install malware on any Windows or Macintosh computer that loaded the video.js file.  The malware has been identified to be a variant of &lt;a href=&quot;https://www.virustotal.com/en/file/ea3be0fb4367e038c602a3de5811821d2367f3326ab2a12f469db4cda06fafa7/analysis/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trojan.PWS.Stealer.1932 or Trojan.Ransom.ED&lt;/a&gt;.  We quickly reverted to safe versions of the video.js file, and took steps to ensure that the issue could not reoccur.&lt;/p&gt;
&lt;p&gt;The specific files affected were:&lt;/p&gt;
&lt;p&gt;vjs.zencdn.net/c/video.js&lt;/p&gt;
&lt;p&gt;vjs.zencdn.net/4.0/video.js&lt;/p&gt;
&lt;p&gt;vjs.zencdn.net/4.1/video.js&lt;/p&gt;
&lt;p&gt;No patch-level versions (e.g. vjs.zencdn.net/4.1.0/video.js) were affected, and neither was the latest version (4.2). Users who host their own copy of Video.js were also not affected.&lt;/p&gt;
&lt;p&gt;Potential Impact: Any browsers that loaded the affected files during the compromised period may have prompted users to install malicious software on their computers.&lt;/p&gt;
&lt;p&gt;It has been determined that the files were originally modified at 4:30am PDST. The files were repaired at 7:15am PDST and completed propagation to CDN edge caches around the world at 7:51am PDST.&lt;/p&gt;
&lt;p&gt;Rest assured that video.js is once again safe to load.  We are currently investigating the root cause. Once we fully understand the nature of the incident, we will provide an update with additional information.&lt;/p&gt;
&lt;p&gt;Keeping our users safe is one of our top priorities, and we sincerely apologize to anyone who was negatively impacted by this event.&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/wMwHep00UvY&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;UPDATE 2013-09-19:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The CDN continues to be secure and we have taken significant steps to ensure it never falls un
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Video.js 4.2.0 released! RTMP, CSS designer, and stability</title>
    <link href="https://videojs.github.io/blog/Video-js-4-2-0-released-RTMP-CSS-designer-and-stability/"/>
    <id>https://videojs.github.io/blog/Video-js-4-2-0-released-RTMP-CSS-designer-and-stability/</id>
    <published>2013-09-06T19:51:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Happy September! The 4.2.0 release of Video.js has a few interesting updates, and a bunch of stability and polish.&lt;/p&gt;
&lt;h2 id=&quot;RTMP-Support&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-2-0-released-RTMP-CSS-designer-and-stability/#RTMP-Support&quot; class=&quot;headerlink&quot; title=&quot;RTMP Support&quot;&gt;&lt;/a&gt;RTMP Support&lt;/h2&gt;&lt;p&gt;First of all, thanks to an impressive collaboration of community members, we now have RTMP support (in &lt;em&gt;beta&lt;/em&gt;). &lt;a href=&quot;http://jsbin.com/cayake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Check out the example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s still pretty basic support for RTMP, but we think it will cover a lot of the general use cases. The feature support includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single stream (no client-side adaptive support)&lt;/li&gt;
&lt;li&gt;Flash only, HTML5 video doesn&amp;rsquo;t support RTMP (but HLS is supported on iOS devices)&lt;/li&gt;
&lt;li&gt;On-demand only. We haven&amp;rsquo;t updated the UI to support live yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To load an RTMP stream in a Video.js player, you&amp;rsquo;ll use a source tag in the same way you would other source types:&lt;/p&gt;
&lt;pre class=&quot;prettify&quot; style=&quot;word-wrap: break-word;&quot;&gt;
&amp;lt;source src=&quot;rtmp://your.streaming.provider.net/cfx/st/&amp;amp;mp4:path/to/video.mp4&quot; type=&quot;rtmp/mp4&quot;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The connection and stream parts are determined by splitting the URL on the first ampersand (&amp;amp;) or the last slash (/).&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;
[http://myurl.com/streaming&amp;amp;/is/fun](http://myurl.com/streaming&amp;amp;/is/fun) --&amp;gt;
  connection: [http://myurl.com/streaming](http://myurl.com/streaming)
  stream: /is/fun

-or-

[http://myurl.com/streaming/is/fun](http://myurl.com/streaming/is/fun) --&amp;gt;
  connection: [http://myurl.com/streaming/is](http://myurl.com/streaming/is)
  stream: fun
&lt;/pre&gt;

&lt;p&gt;The available source types include &lt;code&gt;rtmp/mp4&lt;/code&gt; or &lt;code&gt;rtmp/flv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;RTMP has been a much requested feature over the years and it&amp;rsquo;s great to finally have it in the player. Thanks to everyone involved in that work.&lt;/p&gt;
&lt;h2 id=&quot;Player-Skin-Designer&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-2-0-released-RTMP-CSS-designer-and-stability/#Player-Skin-Designer&quot; class=&quot;headerlink&quot; title=&quot;Player Skin Designer&quot;&gt;&lt;/a&gt;Player Skin Designer&lt;/h2&gt;&lt;p&gt;If you missed the &lt;a href=&quot;http://blog.videojs.com/post/55553002104/new-player-skin-designer-for-video-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;previous blog post&lt;/a&gt;, be sure to check out the &lt;a href=&quot;http://designer.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;new interface for designing the player skin&lt;/a&gt;. It really shows off the customizability of the video.js controls, which are built completely in HTML and CSS.&lt;/p&gt;
&lt;p&gt;With the 4.2 release the styles in the designer have been brought up-to-date with the latest player styles.&lt;/p&gt;
&lt;h2 id=&quot;Control-Bar-Updates&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-2-0-released-RTMP-CSS-designer-and-stability/#Control-Bar-Updates&quot; class=&quot;headerlink&quot; title=&quot;Control Bar Updates&quot;&gt;&lt;/a&gt;Control Bar Updates&lt;/h2&gt;&lt;p&gt;Also in &lt;a href=&quot;http://blog.videojs.com/post/57828375480/hiding-and-showing-video-player-controls&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a previous post&lt;/a&gt;, I described a number of updates that were made to the control bar to fix cross browser/device issues and improve the overall functionality. As of 4.2.0 all of those updates have made it into the stable release.&lt;/p&gt;
&lt;h2 id=&quot;Other-Updates&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-2-0-released-RTMP-CSS-designer-and-stability/#Other-Updates&quot; class=&quot;headerlink&quot; title=&quot;Other Updates&quot;&gt;&lt;/a&gt;Other Updates&lt;/h2&gt;&lt;p&gt;Along with previous updates there&amp;rsquo;s been a number of patches and enhancements along the way. Here&amp;rsquo;s a full list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added LESS as a CSS preprocessor for the default skin (&lt;a href=&quot;https://github.com/videojs/video.js/pull/644&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported MenuButtons for use in the API (&lt;a href=&quot;https://github.com/videojs/video.js/pull/648&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed ability to remove listeners added with one() (&lt;a href=&quot;https://github.com/videojs/video.js/pull/659&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Updated buffered() to account for multiple loaded ranges (&lt;a href=&quot;https://github.com/videojs/video.js/pull/643&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported createItems() for custom menus (&lt;a href=&quot;https://github.com/videojs/video.js/pull/654&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Preventing media events from bubbling up the DOM (&lt;a href=&quot;https://github.com/videojs/video.js/pull/630&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Major reworking of the control bar and many issues fixed (&lt;a href=&quot;https://github.com/videojs/video.js/pull/672&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue with minifiying the code on Windows systems (&lt;a href=&quot;https://github.com/videojs/video.js/pull/683&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added support for RTMP streaming through Flash (&lt;a href=&quot;https://github.com/videojs/video.js/pull/605&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Made tech.features available to external techs (&lt;a href=&quot;https://github.com/videojs/video.js/pull/705&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Minor code improvements (&lt;a href=&quot;https://github.com/videojs/video.js/pull/706&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Updated time formatting to support NaN and Infinity (&lt;a href=&quot;https://github.com/videojs/video.js/pull/627&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an &lt;code&gt;undefined&lt;/code&gt; error in cases where no tech is loaded (&lt;a href=&quot;https://github.com/videojs/video.js/pull/632&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported addClass and removeClass for player components (&lt;a href=&quot;https://github.com/videojs/video.js/pull/661&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Made the fallback message customizable (&lt;a href=&quot;https://github.com/videojs/video.js/pull/638&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue with the loading spinner placement and rotation (&lt;a href=&quot;https://github.com/videojs/video.js/pull/694&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue with fonts being flaky in IE8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latest version can be found on &lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs.com&lt;/a&gt; through the download link or the CDN hosted version.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/V_IGILu3P_0&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Happy September! The 4.2.0 release of Video.js has a few interesting updates, and a bunch of stability and polish.&lt;/p&gt;
&lt;h2 id=&quot;RTMP-Suppo
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Hiding and Showing Video Player Controls</title>
    <link href="https://videojs.github.io/blog/Hiding-and-Showing-Video-Player-Controls/"/>
    <id>https://videojs.github.io/blog/Hiding-and-Showing-Video-Player-Controls/</id>
    <published>2013-08-09T22:51:47.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Last week I decided to tackle a number of outstanding issues around the control bar, and then proceeded to fall down a rabbit hole of related player updates. I&amp;rsquo;ve thankfully resurfaced now, and figured I&amp;rsquo;d write about a few of the updates that came from it.&lt;/p&gt;
&lt;p&gt;One of the expected behaviors of the player&amp;rsquo;s control bar is that it will fade out after a couple of seconds when the user is inactive while watching a video. Previously, the way we achieved this with video.js was through a bit of a CSS trick. When the user&amp;rsquo;s mouse would move out of the video player area, the control bar would be given the classname &lt;code&gt;vjs-fade-out&lt;/code&gt;. This class had a visibility transition with an added 2 second delay.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
.vjs-fade-out {
  display: block;
  visibility: hidden;
  opacity: 0;

  -webkit-transition: visibility 1.5s, opacity 1.5s;
     -moz-transition: visibility 1.5s, opacity 1.5s;
      -ms-transition: visibility 1.5s, opacity 1.5s;
       -o-transition: visibility 1.5s, opacity 1.5s;
          transition: visibility 1.5s, opacity 1.5s;

  /* Wait a moment before fading out the control bar */
  -webkit-transition-delay: 2s;
     -moz-transition-delay: 2s;
      -ms-transition-delay: 2s;
       -o-transition-delay: 2s;
          transition-delay: 2s;
}
&lt;/pre&gt;

&lt;p&gt;When the user&amp;rsquo;s mouse moved back over the player, the class would be removed, canceling any delayed fade-out. This provided a similar experience to how you might expect the controls fading to work, and only took a few lines of javascript to add/remove the class.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
player.on(&#39;mouseout&#39;, function(){ 
  controlBar.addClass(&#39;vjs-fade-out&#39;); 
});

player.on(&#39;mouseover&#39;, function(){ 
  controlBar.removeClass(&#39;vjs-fade-out&#39;); 
});
&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a few drawbacks though that have made it necessary to move away from this approach.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Controls don&amp;rsquo;t fade out in fullscreen mode because the mouse can never move out of the player area.&lt;/li&gt;
&lt;li&gt;There is no mouse on mobile devices so different events and interactions are needed to show/hide the controls.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition to these issues, we want it to be possible for any player component or plugin to hook into the same trigger that hides the controls. Components like social sharing icons should fade out in the same way that the controls do.&lt;/p&gt;
&lt;h2 id=&quot;User-State&quot;&gt;&lt;a href=&quot;/blog/Hiding-and-Showing-Video-Player-Controls/#User-State&quot; class=&quot;headerlink&quot; title=&quot;User State&quot;&gt;&lt;/a&gt;User State&lt;/h2&gt;&lt;p&gt;One of the first things that is being added is a &lt;code&gt;userActive&lt;/code&gt; property on the player, that can be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. What this does is abstract the controls hiding out to what it is we&amp;rsquo;re actually concerned with, that is, whether the user is currently interacting with the player or just passively watching the video. This also decouples the control bar from tracking the user activity itself, and allows other components to more easily behave the same way as the control bar, through a player-level state.&lt;/p&gt;
&lt;p&gt;That actual property is &lt;code&gt;player.userActive()&lt;/code&gt; and returns either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. When this value is changed, it triggers an event on the player.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
player.userActive(true)
    // -&amp;gt; &#39;useractive&#39; event triggered
player.userActive(false)
    // -&amp;gt; &#39;userinactive&#39; event triggered
&lt;/pre&gt;

&lt;p&gt;A CSS classname of either &lt;code&gt;vjs-user-active&lt;/code&gt; or &lt;code&gt;vjs-user-inactive&lt;/code&gt; is also added to the player element. The classname is what&amp;rsquo;s actually used now to hide and show the control bar.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
.vjs-default-skin.vjs-user-inactive .vjs-control-bar {
  display: block;
  visibility: hidden;
  opacity: 0;

  -webkit-transition: visibility 1.5s, opacity 1.5s;
     -moz-transition: visibility 1.5s, opacity 1.5s;
      -ms-transition: visibility 1.5s, opacity 1.5s;
       -o-transition: visibility 1.5s, opacity 1.5s;
          transition: visibility 1.5s, opacity 1.5s;
}
&lt;/pre&gt;

&lt;p&gt;The 2 second delay has been removed from the CSS, and instead will be built into the process of setting the userActive state to false through a javascript timeout. Anytime a mouse event occurs on the player, this timeout will reset. e.g.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var resetDelay, inactivityTimeout;

resetDelay = function(){
    clearTimeout(inactivityTimeout);
    inactivityTimeout = setTimeout(function(){
        player.userActive(false);
    }, 2000);
};

player.on(&#39;mousemove&#39;, function(){
    resetDelay();
})
&lt;/pre&gt;

&lt;p&gt;The mousemove event is called very rapidly while the mouse is moving, and we want to bog down the player process as little as possible during this action, so we&amp;rsquo;re using a technique &lt;a href=&quot;http://ejohn.org/blog/learning-from-twitter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;written about by John Resig&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instead of resetting the timeout for every &lt;code&gt;mousemove&lt;/code&gt;, the &lt;code&gt;mousemove&lt;/code&gt; event will instead set a variable that can be picked up by a javascript interval that&amp;rsquo;s running at a controlled pace.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
var userActivity, activityCheck;

player.on(&#39;mousemove&#39;, function(){
    userActivity = true;
});

activityCheck = setInterval(function() {

  // Check to see if the mouse has been moved
  if (userActivity) {

    // Reset the activity tracker
    userActivity = false;

    // If the user state was inactive, set the state to active
    if (player.userActive() === false) {
      player.userActive(true);
    }

    // Clear any existing inactivity timeout to start the timer over
    clearTimeout(inactivityTimeout);

    // In X seconds, if no more activity has occurred 
    // the user will be considered inactive
    inactivityTimeout = setTimeout(function() {
      // Protect against the case where the inactivity timeout can trigger
      // before the next user activity is picked up  by the 
      // activityCheck loop.
      if (!userActivity) {
        this.userActive(false);
      }
    }, 2000);
  }
}, 250);
&lt;/pre&gt;

&lt;p&gt;That may be a lot to follow, and it&amp;rsquo;s a bit simplified from what&amp;rsquo;s actually in the player now, but essentially it allows us to take some of the processing weight off of the browser while the mouse is moving.&lt;/p&gt;
&lt;h2 id=&quot;Hiding-controls-in-fullscreen&quot;&gt;&lt;a href=&quot;/blog/Hiding-and-Showing-Video-Player-Controls/#Hiding-controls-in-fullscreen&quot; class=&quot;headerlink&quot; title=&quot;Hiding controls in fullscreen&quot;&gt;&lt;/a&gt;Hiding controls in fullscreen&lt;/h2&gt;&lt;p&gt;Thanks to the new userActive state and the javascript timeout for the delay, the controls no longer require the mouse to move outside of the player area in order to hide, and can now hide in fullscreen mode the same way they do when the player is in the page. This also means we can now hide the mouse cursor in the same way we do the controls, so that it doesn&amp;rsquo;t sit over the player while watching in fullscreen.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
.vjs-fullscreen.vjs-user-inactive {
  cursor: none;
}
&lt;/pre&gt;

&lt;h2 id=&quot;Hiding-controls-on-touch-devices&quot;&gt;&lt;a href=&quot;/blog/Hiding-and-Showing-Video-Player-Controls/#Hiding-controls-on-touch-devices&quot; class=&quot;headerlink&quot; title=&quot;Hiding controls on touch devices&quot;&gt;&lt;/a&gt;Hiding controls on touch devices&lt;/h2&gt;&lt;p&gt;The expected behavior on touch devices is a little different than in desktop browsers. There is no &lt;code&gt;mousemove&lt;/code&gt; event to help determine if the user is active or inactive, so typically a longer delay is added before the controls are faded out. Also, while a click on the video itself in desktop browsers will typically toggle between play and pause, a tap on the video on mobile devices will toggle the controls visibility.&lt;/p&gt;
&lt;p&gt;Luckily the framework we&amp;rsquo;ve set up around userActive has made this last part easy enough to set up.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
video.on(&#39;tap&#39;, function(){
  if (player.userActive() === true) {
    player.userActive(false);
  } else {
    player.userActive(true);
  }
});
&lt;/pre&gt;

&lt;p&gt;Manually toggling userActive between true and false will apply the appropriate classnames and trigger the events needed to show and hide the controls as you&amp;rsquo;d expect on a mobile device.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tap&lt;/code&gt; event is actually a custom made event, similar to the tap event you&amp;rsquo;ll find in &lt;a href=&quot;http://jquerymobile.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery mobile&lt;/a&gt;, &lt;a href=&quot;http://eightmedia.github.io/hammer.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hammer.js&lt;/a&gt;, and other mobile touch libraries. A tap event occurs whenever a &lt;code&gt;touchstart&lt;/code&gt; event is fired with the associated &lt;code&gt;touchend&lt;/code&gt; event firing within 250 milliseconds. If the &lt;code&gt;touchend&lt;/code&gt; event takes longer to fire, or if a &lt;code&gt;touchmove&lt;/code&gt; event happens between the two, it is not considered a &lt;code&gt;tap&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;/blog/Hiding-and-Showing-Video-Player-Controls/#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I hope this has given some insight into how that piece of the controls operate in Video.js, and how you can mimic the same interaction if you&amp;rsquo;re building your own plugins for Video.js. Feedback is always appreciated.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/70tJSFYIq9Y&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Last week I decided to tackle a number of outstanding issues around the control bar, and then proceeded to fall down a rabbit hole of rel
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>New Player Skin Designer for Video.js</title>
    <link href="https://videojs.github.io/blog/New-Player-Skin-Designer-for-Video-js/"/>
    <id>https://videojs.github.io/blog/New-Player-Skin-Designer-for-Video-js/</id>
    <published>2013-07-15T23:44:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://designer.videojs.com&quot; title=&quot;Video Player Skin Designer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://65.media.tumblr.com/e1ce78f8543d5e1fffd65e35cfd41b3e/tumblr_inline_mq1y4zEiqe1qz4rgp.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last week Brightcove had an internal hack week where everyone could work on any project they wanted. One of the projects that came out of that was a new &lt;a href=&quot;http://designer.videojs.com&quot; title=&quot;Video Player Skin Designer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;video.js skin designer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The designer allows you to watch changes happen to the skin live as you edit the CSS, making it easier to create a custom look.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;http://codepen.io/heff/pen/wtrHL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this familiar looking example&lt;/a&gt; that was done in just a few minutes.&lt;/p&gt;
&lt;p&gt;Try creating your own and let us know what you think. Better yet, create your own, share it on CodePen.io and post a link in the comments. (It&amp;rsquo;s probably easiest if you start by forking &lt;a href=&quot;http://codepen.io/heff/pen/EarCt&quot; title=&quot;Video.js Default Skin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this unedited example&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;One of my favorite things about video.js is that the skins are built in HTML and CSS, while working across both HTML5 &lt;em&gt;and&lt;/em&gt; Flash video. I think this designer does a nice job of showing off how easy that makes it to customize a player&amp;rsquo;s skin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some notes on how we built it&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a starting point we used Brian Frichette&amp;rsquo;s awesome &lt;a href=&quot;https://github.com/brian-frichette/less-preview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LESS2CSS&lt;/a&gt;, which gave us a huge head start. Brian has offered to help with the skin designer as well, so that&amp;rsquo;s great!&lt;/p&gt;
&lt;p&gt;We haven&amp;rsquo;t added a CSS preprocessor to video.js before because we didn&amp;rsquo;t want the extra layer of abstraction, or the extra step in the build process. When looking at the CSS in the new designer however, it became clear how valuable things like variables can be for helping people understand what&amp;rsquo;s happening in the CSS. Still, we&amp;rsquo;re trying to find the balance between using LESS features and keeping the CSS easily readable by anyone who just knows CSS. That means avoiding some of the more advanced LESS features like conditional statements (though we do use one for big play button positioning).&lt;/p&gt;
&lt;p&gt;We chose to use &lt;a href=&quot;http://lesscss.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LESS&lt;/a&gt; because of the ability to parse the LESS markup in javascript in the browser. I&amp;rsquo;m not aware of any up-to-date in-browser &lt;a href=&quot;http://sass-lang.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SASS&lt;/a&gt; parsers. The completeness of LESS2CSS also influenced that decision. We&amp;rsquo;re using a small enough subset of features that it doesn&amp;rsquo;t really matter which one we use otherwise, though I do like the idea of using $ for variables over @.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s hosted on &lt;a href=&quot;https://www.nodejitsu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodejitsu&lt;/a&gt;, and we&amp;rsquo;re taking advantage of their free hosting for open source. I have to say, it was pretty simple to get the app deployed with their command line tool.&lt;/p&gt;
&lt;p&gt;Let us know if you have any thoughts. The code for the designer can be found here: &lt;a href=&quot;https://github.com/videojs/designer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/videojs/designer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/-k5HhU559kM&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://designer.videojs.com&quot; title=&quot;Video Player Skin Designer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://65.media.tumblr.
    
    </summary>
    
    
      <category term="html5 video" scheme="https://videojs.github.io/blog/tags/html5-video/"/>
    
  </entry>
  
  <entry>
    <title>Video.js 4.1.0 Released</title>
    <link href="https://videojs.github.io/blog/Video-js-4-1-0-Released/"/>
    <id>https://videojs.github.io/blog/Video-js-4-1-0-Released/</id>
    <published>2013-06-28T23:34:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Just in time for the weekend, the next minor version of Video.js is now available. Updates include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Turned on method queuing for unready playback technologies (flash) (&lt;a href=&quot;https://github.com/videojs/video.js/pull/553&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Blocking user text selection on player components (&lt;a href=&quot;https://github.com/videojs/video.js/pull/524&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported requestFullScreen() and cancelFullScreen() in the minified version (&lt;a href=&quot;https://github.com/videojs/video.js/pull/555&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported the global players reference, videojs.players (&lt;a href=&quot;https://github.com/videojs/video.js/pull/560&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Added google analytics to the CDN version (&lt;a href=&quot;https://github.com/videojs/video.js/pull/568&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported fadeIn/fadeOut for the Component API (&lt;a href=&quot;https://github.com/videojs/video.js/pull/581&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an IE poster error when autoplaying (&lt;a href=&quot;https://github.com/videojs/video.js/pull/593&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exported bufferedPercent for the API (&lt;a href=&quot;https://github.com/videojs/video.js/pull/588&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Augmented user agent detection, specifically for Android versions (&lt;a href=&quot;https://github.com/videojs/video.js/pull/470&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed IE9 canPlayType error (&lt;a href=&quot;https://github.com/videojs/video.js/pull/606&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed various issues with captions (&lt;a href=&quot;https://github.com/videojs/video.js/pull/609&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;view&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can get the latest version on &lt;a href=&quot;http://www.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs.com&lt;/a&gt;, either as a download or hosted on our CDN.&lt;/p&gt;
&lt;p&gt;Have a great weekend!&lt;/p&gt;
&lt;p&gt;-heff&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/uqMAcXs28uI&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Just in time for the weekend, the next minor version of Video.js is now available. Updates include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Turned on method queuing
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Video.js 4.0 now available!</title>
    <link href="https://videojs.github.io/blog/Video-js-4-0-now-available/"/>
    <id>https://videojs.github.io/blog/Video-js-4-0-now-available/</id>
    <published>2013-05-09T17:10:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Today we&amp;rsquo;re releasing Video.js 4.0, which is the most solid, lightweight, and I dare say prettiest version yet. It&amp;rsquo;s available for download, on Github, and hosted for free on our CDN.&lt;/p&gt;
&lt;p&gt;Version 4.0 received the most community collaboration of any previous version, which speaks to the growing strength of the JavaScript community, the growing popularity of HTML5 video, and an increase in Video.js usage. Over the last year the number of sites using Video.js has more than &lt;a href=&quot;http://trends.builtwith.com/media/VideoJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;doubled&lt;/a&gt;, and each month there are over 200 million hits to the CDN-hosted version alone! Thank you to all of the Video.js community members for contributing code and filing bug reports.&lt;/p&gt;
&lt;p&gt;This version is also a milestone in that it&amp;rsquo;s the first version released since &lt;a href=&quot;http://blog.videojs.com/post/35666994917/brightcove-acquires-zencoder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brightcove acquired Zencoder&lt;/a&gt; last year. For those who missed the announcement, it was a very good thing for Video.js. In the past, Video.js was a side project for Zencoder that I maintained on top of my regular responsibilities (as if startup life isn&amp;rsquo;t exciting enough). Post-acquisition, Brightcove has not only put me full-time on Video.js, but the Brightcove video player team has become contributors to the project. The Brightcove team is probably the most experienced video player team in the world, supporting the most advanced video technology, for the biggest brands, across all the devices. It&amp;rsquo;s been a privilege to work with them and they&amp;rsquo;ve made major contributions to this version.&lt;/p&gt;
&lt;h3 id=&quot;4-0-Major-Feature-Summary&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#4-0-Major-Feature-Summary&quot; class=&quot;headerlink&quot; title=&quot;4.0 Major Feature Summary:&quot;&gt;&lt;/a&gt;4.0 Major Feature Summary:&lt;/h3&gt;&lt;p&gt;Improved performance through an 18% size reduction using Google Closure Compiler in advanced mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Greater stability through an automated cross-browser/device test suite using TravisCI, Bunyip, and Browserstack.&lt;/li&gt;
&lt;li&gt;New plugin interface and plugin listing for extending Video.js&lt;/li&gt;
&lt;li&gt;New default skin design that uses font icons for greater customization&lt;/li&gt;
&lt;li&gt;Responsive design and retina display support&lt;/li&gt;
&lt;li&gt;Improved accessibility through better ARIA support&lt;/li&gt;
&lt;li&gt;Moved to Apache 2.0 license&lt;/li&gt;
&lt;li&gt;100% JavaScript development tool set including Grunt&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Improved-Performance&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#Improved-Performance&quot; class=&quot;headerlink&quot; title=&quot;Improved Performance&quot;&gt;&lt;/a&gt;Improved Performance&lt;/h4&gt;&lt;p&gt;With version 4.0, performance was our top priority, and a major factor of performance is the time it takes to load the library. What would seem to be minor size reductions can have a big impact, especially when a library will be loaded millions of times a month all over the world. We chose to use Google’s &lt;a href=&quot;https://developers.google.com/closure/compiler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Closure Compiler&lt;/a&gt; because its “advanced mode” currently provides the most aggressive options for code minification, and so far we’ve seen an 18% reduction in code size, with the potential for more.&lt;/p&gt;
&lt;p&gt;Closure Compiler also claims to rewrite code for better runtime performance, though we haven’t had a chance to benchmark this yet.&lt;/p&gt;
&lt;p&gt;Some preliminary load-time benchmarking* shows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Player load times in under 50 milliseconds&lt;/li&gt;
&lt;li&gt;Playback start times in under 150 milliseconds&lt;/li&gt;
&lt;li&gt;Actual video playback seen in under 0.5 seconds (using a CDN hosted MP4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*Initial tests used Chrome with an empty cache on a modern MacBook Pro with a Wi-Fi connection. More formal testing to follow.&lt;/p&gt;
&lt;h4 id=&quot;Greater-Stability&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#Greater-Stability&quot; class=&quot;headerlink&quot; title=&quot;Greater Stability&quot;&gt;&lt;/a&gt;Greater Stability&lt;/h4&gt;&lt;p&gt;Automated cross-browser, cross-device testing is the Holy Grail of testing for a JavaScript library. While building version 4.0, we’ve been able to reach that goal through the use of a number of tools, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://travis-ci.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TravisCI&lt;/a&gt; - Automatically runs unit tests through &lt;a href=&quot;http://phantomjs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhantomJS&lt;/a&gt; on every pull request made to the Video.js source code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ryanseddon.github.io/bunyip/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bunyip&lt;/a&gt; + &lt;a href=&quot;http://www.browserstack.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserstack&lt;/a&gt; - Allows us to run tests in cloud-hosted instances of any browser from IE6 to the latest Chrome, and also a wide range of iOS and Android devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This ability to easily run tests across environments before any new release will give us more protection against regressions, and can allow for a faster feature release cycle.&lt;/p&gt;
&lt;h4 id=&quot;New-Plugin-Interface&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#New-Plugin-Interface&quot; class=&quot;headerlink&quot; title=&quot;New Plugin Interface&quot;&gt;&lt;/a&gt;New Plugin Interface&lt;/h4&gt;&lt;p&gt;The new &lt;a href=&quot;https://github.com/videojs/video.js/blob/master/docs/plugins.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plugins API&lt;/a&gt; allows developers to more easily add custom features to Video.js. The API works similarly to the jQuery plugin interface, giving developers access to add to or overwrite any piece of Video.js. Once a plugin has been created, it can be shared on the &lt;a href=&quot;https://github.com/videojs/video.js/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Video.js plugin list&lt;/a&gt; page on the wiki.&lt;/p&gt;
&lt;h4 id=&quot;New-Default-Skin&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#New-Default-Skin&quot; class=&quot;headerlink&quot; title=&quot;New Default Skin&quot;&gt;&lt;/a&gt;New Default Skin&lt;/h4&gt;&lt;p&gt;With help from the Brightcove UX team, we’ve created a new default skin that’s simpler, more polished, and more customizable. One of the most interesting features is that we’ve moved from using images for icons to font icons. The use of font icons allows you to change the color and size of the icons simply by changing a CSS value. You can see an example of this on the &lt;a href=&quot;http://videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Video.js homepage&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;Improved-Accessibility&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#Improved-Accessibility&quot; class=&quot;headerlink&quot; title=&quot;Improved Accessibility&quot;&gt;&lt;/a&gt;Improved Accessibility&lt;/h4&gt;&lt;p&gt;Greg Kraus, a Video.js community member from &lt;a href=&quot;http://www.NCSU.edu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NCSU.edu&lt;/a&gt;, did some great work testing and improving Video.js accessibility through better use of &lt;a href=&quot;http://www.w3.org/WAI/intro/aria&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ARIA&lt;/a&gt; roles. The changes make it so keyboard-only users, screen reader users, and voice-interface users will be able to interact with the video player. UPDATE: Read more in &lt;a href=&quot;http://accessibility.oit.ncsu.edu/blog/2013/05/09/accessible-video-js-player-available-on-global-accessibility-awareness-day/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Greg&amp;rsquo;s blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;Moved-to-Apache-2-0-License&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#Moved-to-Apache-2-0-License&quot; class=&quot;headerlink&quot; title=&quot;Moved to Apache 2.0 License&quot;&gt;&lt;/a&gt;Moved to Apache 2.0 License&lt;/h4&gt;&lt;p&gt;Earlier versions of Video.js were released under the LGPLv3 license. LGPL often gets confused with its stricter sibling, GPL, which requires that all code the software touches must also be open source. Video.js is meant to be open and free to use in all contexts, and we want that to be clear, so version 4.0 is now released under Apache 2.0, the same license Twitter Bootstrap is released under.&lt;/p&gt;
&lt;h4 id=&quot;100-JavaScript-Tool-Set&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#100-JavaScript-Tool-Set&quot; class=&quot;headerlink&quot; title=&quot;100% JavaScript Tool Set&quot;&gt;&lt;/a&gt;100% JavaScript Tool Set&lt;/h4&gt;&lt;p&gt;Previously Video.js used Ruby for development tools, including Rake for deployment tasks, and zenflow–an internal Zencoder tool that builds on &lt;a href=&quot;https://github.com/nvie/gitflow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gitflow&lt;/a&gt; for development process workflow. With 4.0 we’ve moved to &lt;a href=&quot;http://gruntjs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt; for tasks and we’re building out a tool similar to zenflow in Node.js.&lt;/p&gt;
&lt;h4 id=&quot;Videojs-com-Now-Open-Source&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#Videojs-com-Now-Open-Source&quot; class=&quot;headerlink&quot; title=&quot;Videojs.com Now Open Source&quot;&gt;&lt;/a&gt;Videojs.com Now Open Source&lt;/h4&gt;&lt;p&gt;As part of this release we’ve also made the Videojs.com website open source. So if you see something that should be added or fixed, &lt;a href=&quot;https://github.com/videojs/videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fork it&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;What-now&quot;&gt;&lt;a href=&quot;/blog/Video-js-4-0-now-available/#What-now&quot; class=&quot;headerlink&quot; title=&quot;What now?&quot;&gt;&lt;/a&gt;What now?&lt;/h3&gt;&lt;p&gt;Even with all of the updates listed above, this is simply a jumping-off point for what will be an exciting year for Video.js. We’re continuing to improve performance, multi-platform stability, and customizability through plugins and skins. Members of the community have already started work on plugins for some of the more requested features, like playlists, analytics, and advertising.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href=&quot;http://twitter.com/videojs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@videojs&lt;/a&gt; or sign up for our &lt;a href=&quot;http://zencoder.us2.list-manage2.com/subscribe?u=36f130c3d3fadb2a21d2983b7&amp;amp;id=0f35b0535c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;newsletter&lt;/a&gt; to stay up-to-date on new features and roadmap updates.&lt;/p&gt;
&lt;p&gt;If you’d like to get involved in the project, check out our &lt;a href=&quot;https://github.com/videojs/video.js/blob/master/CONTRIBUTING.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;-&lt;a href=&quot;http://blog.heff.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;heff&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/video-js/~4/2fKZ1Q5wRIE&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Today we&amp;rsquo;re releasing Video.js 4.0, which is the most solid, lightweight, and I dare say prettiest version yet. It&amp;rsquo;s availabl
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Repo Moved!</title>
    <link href="https://videojs.github.io/blog/Repo-Moved/"/>
    <id>https://videojs.github.io/blog/Repo-Moved/</id>
    <published>2013-05-06T20:56:59.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;In preparation for the next version we&amp;rsquo;ve moved the source code repository from github.com/zencoder/video-js to &lt;a href=&quot;http://github.com/videojs/video.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/videojs/video.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have a local clone you can update your clone&amp;rsquo;s upstream URL with:&lt;/p&gt;
&lt;pre&gt;git remote set-url upstream git://github.com/videojs/video.js.git&lt;/pre&gt;

&lt;p&gt;The relationship between your fork (e.g. github.com/you/video-js) should still be intact, including any pull requests.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;-heff&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In preparation for the next version we&amp;rsquo;ve moved the source code repository from github.com/zencoder/video-js to &lt;a href=&quot;http://git
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Site and Support Updates</title>
    <link href="https://videojs.github.io/blog/Site-and-Support-Updates/"/>
    <id>https://videojs.github.io/blog/Site-and-Support-Updates/</id>
    <published>2012-11-15T19:54:18.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;After a brief hiatus of helping &lt;a href=&quot;http://blog.videojs.com/post/35666994917/brightcove-acquires-zencoder&quot; title=&quot;Zencoder acquired by Brightcove&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brightcove and Zencoder come together&lt;/a&gt;, I&amp;rsquo;m moving full time to developing and supporting Video.js. Thank you to everyone who has continued to commit code and help out in the forums. &lt;/p&gt;
&lt;p&gt;As part of this move I&amp;rsquo;m trying to optimize the tools used for video.js project management and support. The first big change is that the forums are being replaced with &lt;a href=&quot;http://stackoverflow.com/questions/tagged/video.js&quot; title=&quot;Video.js Support on Stack Overflow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stack Overflow&lt;/a&gt; (tag with &amp;ldquo;video.js&amp;rdquo;) and &lt;a href=&quot;https://github.com/zencoder/video-js/issues&quot; title=&quot;Video.js Submit Issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Over the last few years Video.js has become more popular than I ever expected, and at the same time Stack Overflow has come up as an incredible tool for supporting developer communities. So along with many other projects like &lt;a href=&quot;http://blog.stackoverflow.com/2011/08/facebook-stackoverflow/&quot; title=&quot;Facebook on Stack Overflow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;http://android-developers.blogspot.com/2009/12/hello-stack-overflow.html&quot; title=&quot;Android on Stack Overflow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android&lt;/a&gt;, and &lt;a href=&quot;http://html5boilerplate.com&quot; title=&quot;HTML5 Boilerplate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 Boilerplate&lt;/a&gt;, I&amp;rsquo;m excited to move support to Stack Overflow&amp;rsquo;s awesome tool and community. I&amp;rsquo;ll be leaving the forums up for bit but from here forward please post questions to Stack Overflow and use the &amp;ldquo;video.js&amp;rdquo; tag.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also begun cleaning up and organizing the &lt;a href=&quot;https://github.com/zencoder/video-js/issues&quot; title=&quot;Video.js Submit Issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Issues&lt;/a&gt; for Video.js, which previously existed, but issues were split between the forum and Github. If you find specific bugs with video.js please &lt;a href=&quot;https://github.com/zencoder/video-js/issues/new&quot; title=&quot;Submit Issue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;submit them there&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the project management side of things I&amp;rsquo;ll be using &lt;a href=&quot;https://trello.com&quot; title=&quot;Trello&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trello&lt;/a&gt;, and exposing boards so others can see the progress of development.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also paring down the site and moving more complex sections to other services that can better handle them. I&amp;rsquo;ve already moved the blog to &lt;a href=&quot;http://tumblr.com&quot; title=&quot;Tumblr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tumblr&lt;/a&gt;, and I&amp;rsquo;m moving the docs to the &lt;a href=&quot;https://github.com/zencoder/video-js/tree/master/docs/index.md&quot; title=&quot;Video.js docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github repo&lt;/a&gt;, which has built-in docs formatting.&lt;/p&gt;
&lt;p&gt;For those starting an open source project today, you can look at this as my guide to supporting an open source project. I wish I would have know to do all this when I started on Video.js.&lt;/p&gt;
&lt;p&gt;More project updates coming soon.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;-heff &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;After a brief hiatus of helping &lt;a href=&quot;http://blog.videojs.com/post/35666994917/brightcove-acquires-zencoder&quot; title=&quot;Zencoder acquired 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Brightcove Acquires Zencoder</title>
    <link href="https://videojs.github.io/blog/Brightcove-Acquires-Zencoder/"/>
    <id>https://videojs.github.io/blog/Brightcove-Acquires-Zencoder/</id>
    <published>2012-07-26T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://66.media.tumblr.com/tumblr_mdgad5rr0S1qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Today, Zencoder announced that it is being acquired by &lt;a href=&quot;http://brightcove.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brightcove&lt;/a&gt;, the leading online video platform (OVP). You can read more on the specifics in the &lt;a href=&quot;http://blog.zencoder.com/2012/07/26/brightcove-acquires-zencoder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zencoder blog post&lt;/a&gt; and &lt;a href=&quot;http://www.brightcove.com/en/company/press/brightcove-signs-definitive-agreement-acquire-zencoder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;press release&lt;/a&gt;, but I also wanted to be clear on what this means for Video.js. As you may know, Video.js was created by me (Steve Heffernan, Co-founder of Zencoder) and Zencoder continues to be its core contributor and sponsor (like 37signals to Rails or Joyent to Node.js).&lt;/p&gt;
&lt;p&gt;This acquisition means only great things for Video.js. To quickly summarize, Video.js will continue to be a free and open source video player &amp;amp; framework, and Brightcove will be investing more in Video.js than Zencoder ever could.&lt;/p&gt;
&lt;p&gt;I wrote the first version of Video.js in early 2010 during Zencoder’s time in Y Combinator (while secluded in our rented house deep in the Santa Cruz mountains). Over the past few years I’ve continued to build the library and pull in contributions from other Zencoder team members and the community, but only on the side of my ongoing Founder and VP of Marketing duties at Zencoder. While Video.js has continued to gain popularity among developers and is now being &lt;a href=&quot;http://trends.builtwith.com/media/VideoJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;used on over 25,000 websites&lt;/a&gt;, there’s still work to be done and room to grow. So one of the more significant changes that will be happening is that Brightcove will be putting me on Video.js full time, freeing me up to work on the core of the project and to better support the Video.js community, both users and contributors.&lt;/p&gt;
&lt;p&gt;Beyond this, Brightcove has a first-class player development team backing their platform’s video player. While the specifics of how the two teams and players will work together are still being discussed, we have agreement on our philosophies and views about where player technology is going. This combined knowledge and collaboration is sure to have a positive impact for both players.&lt;/p&gt;
&lt;p&gt;While the additional resources will have a big impact, the best open source software projects only got to where they are through the contributions of developers in the community. So if you’ve previously been cautious to dig into the source or push back a specific feature or bug fix, I hope this news only helps encourage you to jump in and help make Video.js the best resource for working with video in the browser.&lt;/p&gt;
&lt;p&gt;There will be more info to come as things progress, but please feel free to ask any questions in the comments below.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;Steve &amp;amp; The Zencoder Team&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://66.media.tumblr.com/tumblr_mdgad5rr0S1qzc111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Today, Zencoder announced that it is being acquired by 
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>Version 3.2 Update</title>
    <link href="https://videojs.github.io/blog/Version-3-2-Update/"/>
    <id>https://videojs.github.io/blog/Version-3-2-Update/</id>
    <published>2012-03-23T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;First of all, check out the new &lt;a href=&quot;/blog/Version-3-2-Update//tag-builder/&quot;&gt;video tag builder&lt;/a&gt;. The previous version of this site had an embed code builder, and people were &lt;a href=&quot;http://help.videojs.com/discussions/problems/873-whered-the-embed-builder-go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pretty disappointed&lt;/a&gt; that the new site didn&amp;rsquo;t. So I&amp;rsquo;m happy to announce that it&amp;rsquo;s available again, now as an HTML5 video tag builder that could probably be used outside of Video.js, it includes track tags, and even lets you test the settings. Let me know if you have any feedback on it.&lt;/p&gt;
&lt;p&gt;The most notable change in this release is probably the completely overhauled &amp;lt;track&amp;gt; tag support.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/4092295.js?file=html5-track-tag.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/4092295.js?file=html5-track-tag.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The new version supports subtitles, captions, and even chapters. When you include tracks of different kinds, Video.js will automatically create menus in the player where users can select the language to display, or which chapter to jump to. Video.js also now supports the new &lt;a href=&quot;http://dev.w3.org/html5/webvtt/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebVTT&lt;/a&gt; text format, which is not far off from the previously supported WebSRT format but did take some tweaking in the parser. Not all WebVTT placement features are supported yet, but the basics of displaying text are, and we&amp;rsquo;ll be working to get more WebVTT features built in.&lt;/p&gt;
&lt;p&gt;Additionally there was work done to make some API methods accessible earlier. For any method that isn&amp;rsquo;t a getter (returns a specific value from the player), if you call the method before the playback technology (HTML5/Flash) is ready, it will now cache the call until it is ready. So where previously you might have had to wait for the ready callback:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/4092295.js?file=wait-for-ready.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/4092295.js?file=wait-for-ready.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You could now do:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/4092295.js?file=no-wait-for-ready.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/4092295.js?file=no-wait-for-ready.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again, that&amp;rsquo;s just for methods where you are setting a value or triggering an action. If you try to get a value back like &lt;code&gt;myPlayer.duration()&lt;/code&gt;, you&amp;rsquo;ll get nothing until the player is ready.&lt;/p&gt;
&lt;p&gt;One other feature that was requested in the forums was automatically translating relative video URLs to absolute URLs for the flash fallback. This was an issue with the CDN hosted version which involved loading a remote SWF file which didn&amp;rsquo;t have the same context as the player. Before we would just tell people to use full URLs (http://) but that shouldn&amp;rsquo;t be an issue anymore.&lt;/p&gt;
&lt;p&gt;Thanks to everyone that&amp;rsquo;s helped contribute code lately, and apologies for any long response times in the forums as I continue to try to push out code.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the full change log for the release.&lt;/p&gt;
&lt;h3 id=&quot;3-2-0-2012-03-20-baxter&quot;&gt;&lt;a href=&quot;/blog/Version-3-2-Update/#3-2-0-2012-03-20-baxter&quot; class=&quot;headerlink&quot; title=&quot;3.2.0 / 2012-03-20 / baxter&quot;&gt;&lt;/a&gt;3.2.0 / 2012-03-20 / baxter&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Updated docs with more options.&lt;/li&gt;
&lt;li&gt;Overhauled HTML5 Track support.&lt;/li&gt;
&lt;li&gt;Fixed Flash always autoplaying when setting source.&lt;/li&gt;
&lt;li&gt;Fixed localStorage context&lt;/li&gt;
&lt;li&gt;Updated &amp;lsquo;fullscreenchange&amp;rsquo; event to be called even if the user presses escape to exit fullscreen.&lt;/li&gt;
&lt;li&gt;Automatically converting source URL to absolute for Flash fallback.&lt;/li&gt;
&lt;li&gt;Created new ‘loadedalldata&amp;rsquo; event for when the source is completely downloaded&lt;/li&gt;
&lt;li&gt;Improved player.destroy(). Now removes elements and references.&lt;/li&gt;
&lt;li&gt;Refactored API to be more immediately available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cheers,&lt;br&gt; -Heff&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;First of all, check out the new &lt;a href=&quot;/blog/Version-3-2-Update//tag-builder/&quot;&gt;video tag builder&lt;/a&gt;. The previous version of this site
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Version 3.1 Update</title>
    <link href="https://videojs.github.io/blog/Version-3-1-Update/"/>
    <id>https://videojs.github.io/blog/Version-3-1-Update/</id>
    <published>2012-01-30T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;This is the first release since the initial 3.0 launch, aside from some hotfixes that went out immediately. It includes a number of fixes for things that users in the &lt;a href=&quot;http://help.videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;forums&lt;/a&gt; found right off the bat.&lt;/p&gt;
&lt;p&gt;One feature that&amp;rsquo;s optional for testing in this release is iFrame Mode for Flash. One the of the unique things about Video.js is we haven&amp;rsquo;t built any controls into our Flash player, and instead use HTML and CSS to create the controls for the Flash side as well. This keeps the experience consistent and the Flash player very lightweight, however there&amp;rsquo;s a number of issues that you run into with Flash when you take an approach like this. If you&amp;rsquo;ve ever tried to resize the parent of a Flash object, or hide a Flash object and then show it again, you&amp;rsquo;ve probably run into the issue of Flash reloading in Firefox. This is a bug that&amp;rsquo;s been in Firefox for &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=90268&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;quite a long time&lt;/a&gt; however it looks like it might be fixed by version 13 (currently 9). To add on top of this, with the new &lt;a href=&quot;https://wiki.mozilla.org/Gecko:FullScreenAPI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;browser fullscreen API&lt;/a&gt;, the other browsers now also reload Flash when you go to native fullscreen.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve found a bit of a fix where if you embed the Flash object in an iframe first, it can get around the reloading in some of these cases. So in the new version there&amp;rsquo;s an option to turn this on and try it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/4092929.js?file=iframe-mode.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/4092929.js?file=iframe-mode.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be doing some more testing to make sure it&amp;rsquo;s stable before we push it out to everyone.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the full change log for the release.&lt;/p&gt;
&lt;h4 id=&quot;3-1-0-2012-01-30-leonardo&quot;&gt;&lt;a href=&quot;/blog/Version-3-1-Update/#3-1-0-2012-01-30-leonardo&quot; class=&quot;headerlink&quot; title=&quot;3.1.0 / 2012-01-30 / leonardo&quot;&gt;&lt;/a&gt;3.1.0 / 2012-01-30 / leonardo&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Added CSS fix for Firefox 9 fullscreen (in the rare case that it&amp;rsquo;s enabled)&lt;/li&gt;
&lt;li&gt;Replaced swfobject with custom embed to save file size.&lt;/li&gt;
&lt;li&gt;Added flash iframe-mode, an experimental method for getting around flash reloading issues.&lt;/li&gt;
&lt;li&gt;Fixed issue with volume knob position. Improved controls fading.&lt;/li&gt;
&lt;li&gt;Fixed ian issue with triggering fullscreen a second time.&lt;/li&gt;
&lt;li&gt;Fixed issue with getting attributes in Firefox 3.0&lt;/li&gt;
&lt;li&gt;Escaping special characters in source URL for Flash&lt;/li&gt;
&lt;li&gt;Added a check for if Firefox is enabled which fixes a Firefox 9 issue&lt;/li&gt;
&lt;li&gt;Stopped spinner from showing on &amp;lsquo;stalled&amp;rsquo; events since browsers sometimes don&amp;rsquo;t show that they&amp;rsquo;ve recovered.&lt;/li&gt;
&lt;li&gt;Fixed CDN Version which was breaking dev.html&lt;/li&gt;
&lt;li&gt;Made full-window mode more independent&lt;/li&gt;
&lt;li&gt;Added rakefile for release generation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cheers,&lt;br&gt; -Heff&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This is the first release since the initial 3.0 launch, aside from some hotfixes that went out immediately. It includes a number of fixes
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Video.js Version 3.0!</title>
    <link href="https://videojs.github.io/blog/Video-js-Version-3-0/"/>
    <id>https://videojs.github.io/blog/Video-js-Version-3-0/</id>
    <published>2012-01-10T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;After months and months of work we&amp;rsquo;re happy to announce Video.js version 3.0. Some of the exiting new features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Same HTML/CSS Skin for both HTML5 and Flash video&lt;/li&gt;
&lt;li&gt;Super lightweight Flash fallback player for browsers that don&amp;rsquo;t support HTML5 video&lt;/li&gt;
&lt;li&gt;Free CDN hosting by Level3 A lot more releases and developments are on their way!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cheers,&lt;br&gt;-Heff&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;After months and months of work we&amp;rsquo;re happy to announce Video.js version 3.0. Some of the exiting new features include:&lt;/p&gt;
&lt;ul&gt;
&lt;l
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Lynda.com HTML5 Video Tutorial Released</title>
    <link href="https://videojs.github.io/blog/Lynda-com-HTML5-Video-Tutorial-Released/"/>
    <id>https://videojs.github.io/blog/Lynda-com-HTML5-Video-Tutorial-Released/</id>
    <published>2011-06-17T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://goo.gl/y0SZb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://videojs.com/img/blog/2011/06/lynda_com.jpg&quot; alt=&quot;Lynda HTML5 Video Tutorial&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I recently filmed a series of &lt;a href=&quot;http://goo.gl/y0SZb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 video tutorials&lt;/a&gt; for Lynda.com, a really great service for online training. It was a great experience, and the videos are now available for viewing. You can get a &lt;a href=&quot;http://www.lynda.com/promo/trial/Default.aspx?lpk35=1833&amp;amp;utm_medium=affiliate&amp;amp;utm_source=ldc_affiliate&amp;amp;utm_content=655&amp;amp;utm_campaign=CD3175&amp;amp;bid=655&amp;amp;aid=CD3175&amp;amp;opt=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;7-day free trial here&lt;/a&gt; and check them out. Let me know if they&amp;rsquo;re helpful at all.&lt;/p&gt;
&lt;p&gt;-Heff&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://goo.gl/y0SZb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://videojs.com/img/blog/2011/06/lynda_com.jpg&quot; alt=&quot;Lynda HTML
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
      <category term="code" scheme="https://videojs.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>How are you using video.js?</title>
    <link href="https://videojs.github.io/blog/How-are-you-using-video-js/"/>
    <id>https://videojs.github.io/blog/How-are-you-using-video-js/</id>
    <published>2011-06-07T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;I&amp;rsquo;d love to hear where and how people are using video.js. If you&amp;rsquo;re using it somewhere, leave a note/link in the comments.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;-Heff&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I&amp;rsquo;d love to hear where and how people are using video.js. If you&amp;rsquo;re using it somewhere, leave a note/link in the comments.&lt;/p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>New MPEG LA WebM/VP8 Patent Pool</title>
    <link href="https://videojs.github.io/blog/New-MPEG-LA-WebM-VP8-Patent-Pool/"/>
    <id>https://videojs.github.io/blog/New-MPEG-LA-WebM-VP8-Patent-Pool/</id>
    <published>2011-02-11T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;One of the things that browser and device vendors stand behind when deciding to support MP4/h.264 over Google&amp;rsquo;s Webm video format and VP8 codec, is that while VP8 is open source, it may still be encumbered by patents. So far none of these &lt;a href=&quot;http://en.wikipedia.org/wiki/Submarine_patent&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;submarine patents&lt;/a&gt; have surfaced, but now MPEG LA has &lt;a href=&quot;http://www.mpegla.com/main/pid/vp8/default.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;put out a call&lt;/a&gt;, and hopes to form a patent pool that would create a license for VP8, and essentially put a price on it. In &lt;a href=&quot;http://www.webmproject.org/license/additional/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google&amp;rsquo;s own license&lt;/a&gt;, it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;If you or your agent or exclusive licensee institute or order or agree to the institution of patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that this implementation of VP8 or any code incorporated within this implementation of VP8 constitutes direct or contributory patent infringement, or inducement of patent infringement, then any patent rights granted to you under this License for this implementation of VP8 shall terminate as of the date such litigation is filed.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if you claim VP8 infringes on a patent and sue, your license to use VP8 is terminated. Not sure exactly how that would affect a patent pool, but an interesting battle could be ahead.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;One of the things that browser and device vendors stand behind when deciding to support MP4/h.264 over Google&amp;rsquo;s Webm video format a
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>Apple adds AirPlay to Mobile Safari</title>
    <link href="https://videojs.github.io/blog/Apple-adds-AirPlay-to-Mobile-Safari/"/>
    <id>https://videojs.github.io/blog/Apple-adds-AirPlay-to-Mobile-Safari/</id>
    <published>2011-01-28T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;AirPlay is a video feature on iOS devices that lets you play video from your device on your TV, by streaming it to an Apple TV on the same wireless network. Before now this was only available in the iPod and YouTube apps, but with iOS 4.3 (now in beta) it will be available through Mobile Safari as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://macosrumors.com/wp-content/uploads/2011/01/IMG_0169.png&quot; alt=&quot;AirPlay Feature in Mobile Safari&quot;&gt;&lt;/p&gt;
&lt;p&gt;In order to allow AirPlay as an option, video publishers have to add an attribute to the HTML5 video tag. &amp;lt;video width=&amp;ldquo;480&amp;rdquo; height=&amp;ldquo;300&amp;rdquo; controls x-webkit-airplay=&amp;ldquo;allow&amp;rdquo;&amp;gt; &amp;hellip; We&amp;rsquo;ll be adding this as a default attribute in the next VideoJS version.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://macosrumors.com/2011/01/12/first-look-mobile-safari-airplay/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the whole story on MacRumors&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;AirPlay is a video feature on iOS devices that lets you play video from your device on your TV, by streaming it to an Apple TV on the sam
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
      <category term="code" scheme="https://videojs.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Google is dropping h.264 from Chrome</title>
    <link href="https://videojs.github.io/blog/Google-is-dropping-h-264-from-Chrome/"/>
    <id>https://videojs.github.io/blog/Google-is-dropping-h-264-from-Chrome/</id>
    <published>2011-01-11T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;UPDATE: Added a chart that shows what format support will look like without Chrome supporting h.264.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://videojs.com/img/blog/2011/01/google-chrome-drops-h264.png&quot; alt=&quot;Google Chrome Drops h.264 Support&quot;&gt;&lt;/p&gt;
&lt;p&gt;Google has decided to support the open source community by dropping h.264 support from Chrome. Previously Chrome was the only browser that could play all 3 major HTML5 formats—MP4/h.264, WebM/VP8, and Ogg/Theora. This is probably a strategic move at the same time, since h.264 seems unlikely to be beaten at this point, especially with IE9 supporting h.264 while requiring an extra plugin to use VP8. In my opinion, there&amp;rsquo;s two major events that could end the format war.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apple adopts WebM/VP8 (which would require adequate hardware to include in iOS devices)&lt;/li&gt;
&lt;li&gt;MPEG LA removes all royalties from h.264&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.chromium.org/2011/01/html-video-codec-support-in-chrome.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original post&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;UPDATE: Added a chart that shows what format support will look like without Chrome supporting h.264.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://videojs.com/
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
      <category term="stats" scheme="https://videojs.github.io/blog/tags/stats/"/>
    
  </entry>
  
  <entry>
    <title>Over 50% of web users now support HTML5 Video</title>
    <link href="https://videojs.github.io/blog/Over-50-of-web-users-now-support-HTML5-Video/"/>
    <id>https://videojs.github.io/blog/Over-50-of-web-users-now-support-HTML5-Video/</id>
    <published>2011-01-07T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;As we roll into 2011, HTML5 video hits a major milestone. 50.5% of web users now support HTML5 video playback. This number was gathered by comparing browser versions that support HTML5 video with StatCounter&amp;rsquo;s &lt;a href=&quot;http://gs.statcounter.com/#browser_version-ww-daily-20101201-20101231&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;world-wide browser version statistics&lt;/a&gt;. &lt;img src=&quot;http://videojs.com/img/blog/2011/01/html5-video-user-support.png&quot; alt=&quot;HTML5 Video Statistics&quot;&gt;This is a 66% growth in HTML5 video user support since December of 2009. With the expected release of Internet Explorer 9 in the near future, 2011 could see a major increase in websites adopting HTML5 video as their primary playback method. Of browsers that support HTML5 video, Mozilla&amp;rsquo;s Firefox is the clear leader, with Google&amp;rsquo;s Chrome in second place. Much of the growth in HTML5 video support can be attributed to Chrome&amp;rsquo;s success in stealing market share from Internet Explore over the last year.&lt;/p&gt;
&lt;h2 id=&quot;Video-Formats&quot;&gt;&lt;a href=&quot;/blog/Over-50-of-web-users-now-support-HTML5-Video/#Video-Formats&quot; class=&quot;headerlink&quot; title=&quot;Video Formats&quot;&gt;&lt;/a&gt;Video Formats&lt;/h2&gt;&lt;p&gt;The format war continues to be a deterrent of HTML5 video adoption, and there&amp;rsquo;s no clear end in sight. While Apple has helped accelerate HTML5 video by requiring it for video playback on the iPhone, it&amp;rsquo;s also the one vendor that will not support Google&amp;rsquo;s WebM/VP8 format, which has the highest potential for becoming the standard format for HTML5 video. Among other reasons, Apple has invested a lot of money in the mp4/h.264 format, including hardware built into iPads and iPhones to decode/encode it. Meaning even if Apple decided to support WebM, it would take more than a simple software update to get WebM to the many iPhone and iPad users. Microsoft has said they will support WebM/VP8 in Internet Explorer 9, however only &amp;ldquo;when the user has installed a VP8 codec&amp;rdquo;. Which basically means they won&amp;rsquo;t support it. Microsoft&amp;rsquo;s preference for MP4/h.264 was made more obvious with their &lt;a href=&quot;http://news.cnet.com/8301-30685_3-20025721-264.html?part=rss&amp;amp;subj=news&amp;amp;tag=2547-1_3-0-20&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;release of a plugin&lt;/a&gt; that allows h.264 to be played back in Firefox on Windows. The following graphs show the support and growth of the different video formats. &lt;img src=&quot;http://videojs.com/img/blog/2011/01/html5-format-statistics.png&quot; alt=&quot;HTML5 Video Format Statistics&quot;&gt; WebM had a sharp rise in August as Google released Chrome 6 and pushed out updates to its users. In the following charts you can see different views of how formats are divided among HTML5 video users. The first chart shows user support by combinations of formats. The second compares support of open vs. closed formats. &lt;img src=&quot;http://videojs.com/img/blog/2011/01/html5-video-format-group-stats.png&quot; alt=&quot;HTML5 Video Format Group Statistics&quot;&gt; From an HTML5 video perspective, open formats win out significantly over closed formats, with Apple and IE9 hanging on to the last 10%. This may change over the next year with the official release of IE9, unless Microsoft decides to support WebM/VP8 without the need for an additional installation. Finally, if you are interested in the Flash vs. HTML5 debate, Flash is well entrenched and HTML5 video still has a long way to catch up. According to Adobe, Flash is supported by over 99% of web users. Statistics from other sites seem to support this, though according to Omniture (now Adobe), the internet average is 116.8% (sic). &lt;img src=&quot;http://videojs.com/img/blog/2011/01/omniture-stat.png&quot; alt=&quot;Omniture Flash Support Statistic&quot;&gt; As of Flash 9 update 3 (9.0.115), Flash has supported the MP4/h.264 format for video playback. In the following chart, you can see how considering Flash affects the comparison of video format support. &lt;img src=&quot;http://videojs.com/img/blog/2011/01/flash-vs-html5-statistics.png&quot; alt=&quot;Flash vs. HTML5 Video Statistics&quot;&gt; However, Adobe has &lt;a href=&quot;http://blogs.adobe.com/flashplatform/2010/05/adobe_support_for_vp8.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;said they will support WebM/VP8&lt;/a&gt; in a later release of Flash. The rate that users upgrade to the latest version of Flash is relatively fast, so this could have a big impact on WebM support when it happens. Overall, Flash will be difficult for HTML5 to dethrone. Beyond user support and format discrepancies there is a long list of features that Flash players have supported for years, which will take time for all browsers to build in. However, many of those features can be built with JavaScript, which allows them to be used across browsers immediately. It&amp;rsquo;s up to the open source community to build the features people need to accept HTML5 as their primary means of video playback. VideoJS is an open source HTML5 video player and framework that makes it easy to support HTML5 video as well as Flash for older browsers. It provides a consistent interface across browsers and solves many browser/mobile device bugs. There are still quite a few rough edges with HTML5 video, but the many contributors to VideoJS are smoothing those over and expanding VideoJS to meet the needs of web users.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;As we roll into 2011, HTML5 video hits a major milestone. 50.5% of web users now support HTML5 video playback. This number was gathered b
    
    </summary>
    
    
      <category term="stats" scheme="https://videojs.github.io/blog/tags/stats/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Video + Google Maps Mashup</title>
    <link href="https://videojs.github.io/blog/HTML5-Video-Google-Maps-Mashup/"/>
    <id>https://videojs.github.io/blog/HTML5-Video-Google-Maps-Mashup/</id>
    <published>2010-12-16T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Mozilla has a cool demo of playing a video while drawing a line on a Google map similar to what you&amp;rsquo;d see in an Indiana Jones film. Check out the &lt;a href=&quot;http://hacks.mozilla.org/2010/12/spirit-of-indiana-jones-syncing-html5-video-with-maps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;original post&lt;/a&gt; and the &lt;a href=&quot;http://isithackday.com/spirit-of-indiana/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Mozilla has a cool demo of playing a video while drawing a line on a Google map similar to what you&amp;rsquo;d see in an Indiana Jones film.
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>2.0.2 Release - Subtitle Optimization + Safari on Leopard FS Fix</title>
    <link href="https://videojs.github.io/blog/2-0-2-Release-Subtitle-Optimization-Safari-on-Leopard-FS-Fix/"/>
    <id>https://videojs.github.io/blog/2-0-2-Release-Subtitle-Optimization-Safari-on-Leopard-FS-Fix/</id>
    <published>2010-12-10T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Smallish update with some fixes and optimizations. Rewrote the subtitles parser so it&amp;rsquo;s a lot more optimized and fixes a subtitle display bug. Put in a check for Safari running on Mac OSX 10.5 (Leopard), which doesn&amp;rsquo;t like native fullscreen for some reason. Triggering full window mode instead.&lt;/p&gt;
&lt;p&gt;Full List&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: Rewrote and optimized subtitle code.&lt;/li&gt;
&lt;li&gt;Feature: Protecting against volume ranges outside of 1 and 0.&lt;/li&gt;
&lt;li&gt;Fix: Bug in Safari for Mac OS 10.5 (Leopard) that was breaking fullscreen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://videojs.com/#download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download version 2.0.2&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Smallish update with some fixes and optimizations. Rewrote the subtitles parser so it&amp;rsquo;s a lot more optimized and fixes a subtitle d
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>2.0.0 Release - Behaviors, fallback APIs, and more.</title>
    <link href="https://videojs.github.io/blog/2-0-0-Release-Behaviors-fallback-APIs-and-more/"/>
    <id>https://videojs.github.io/blog/2-0-0-Release-Behaviors-fallback-APIs-and-more/</id>
    <published>2010-11-22T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Big update. The biggest change for current users is a move back to using DIVs for control bar elements instead of unordered lists. There were a lot of conflicting styles issues when using lists, which shouldn&amp;rsquo;t be an issue with divs. So if you upgrade, don&amp;rsquo;t forget to upgrade your stylesheets as well.&lt;/p&gt;
&lt;p&gt;Beyond that, a lot of code was reorganized and modularized to create a platform for further expansion, like custom plugins and controls. The concept of &amp;ldquo;behaviors&amp;rdquo; was added, so you can activate any element on the page to act like a video controls. For instance, the following code snippet will make the specified element act like a play button, and play the video when clicked.&lt;/p&gt;
&lt;pre&gt;myplayer.activateElement(myElement, &quot;playButton&quot;);
&lt;/pre&gt;

&lt;p&gt;The next code snippet will make the element act like a play progress bar, meaning it will grow horizontally as the video plays.&lt;/p&gt;
&lt;pre&gt;myplayer.activateElement(myElement, &quot;playProgressBar&quot;);
&lt;/pre&gt;

&lt;p&gt;More documentation on this is coming.&lt;/p&gt;
&lt;p&gt;The code is now prepped for APIs to the fallback flash players. So if you call myPlayer.play(), it will trigger a play in both the HTML5 and the Flash version, whichever is currently being used. A flowplayer API is just about done, and other popular Flash players will follow.&lt;/p&gt;
&lt;p&gt;Finally, you can change the fallback order by modifying the playerFallbackOrder option, which is an array of player platforms. So if you want Flash to be dominant, you would pass the following option.&lt;/p&gt;
&lt;pre&gt;VideoJS.setupAllWhenReady({
  playerFallbackOrder: [&quot;flash&quot;, &quot;html5&quot;, &quot;links&quot;]
});
&lt;/pre&gt;

&lt;p&gt;This also leaves room for other platforms to be added, like Quicktime.&lt;/p&gt;
&lt;p&gt;So coming up is Flash player APIs, and another cool feature I don&amp;rsquo;t want to mention just yet.&lt;/p&gt;
&lt;p&gt;Full list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: Created &amp;ldquo;behaviors&amp;rdquo; concept for adding behaviors to elements - Feature: Switched back to divs for controls, for more portable styles&lt;/li&gt;
&lt;li&gt;Feature: Created playerFallbackOrder array option. [&amp;ldquo;html5&amp;rdquo;, &amp;ldquo;flash&amp;rdquo;, &amp;ldquo;links&amp;rdquo;]&lt;/li&gt;
&lt;li&gt;Feature: Created playerType concept, for initializing different platforms&lt;/li&gt;
&lt;li&gt;Feature: Added play button for Android&lt;/li&gt;
&lt;li&gt;Feature: Added spinner for iPad (non-fullscreen)&lt;/li&gt;
&lt;li&gt;Feature: Split into multiple files for easier development&lt;/li&gt;
&lt;li&gt;Feature: Combined VideoJS &amp;amp; &lt;em&gt;V&lt;/em&gt; into the same variable to reduce confusion&lt;/li&gt;
&lt;li&gt;Fix: Checking for m3u8 files (Apple HTTP Streaming)&lt;/li&gt;
&lt;li&gt;Fix: Catching error on localStorage full that safari seems to randomly throw&lt;/li&gt;
&lt;li&gt;Fix: Scrubbing to end doesn&amp;rsquo;t trigger onEnded&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://videojs.com/#download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download version 2.0.0&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Big update. The biggest change for current users is a move back to using DIVs for control bar elements instead of unordered lists. There 
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Make sites serve you HTML5 video in Safari</title>
    <link href="https://videojs.github.io/blog/Make-sites-serve-you-HTML5-video-in-Safari/"/>
    <id>https://videojs.github.io/blog/Make-sites-serve-you-HTML5-video-in-Safari/</id>
    <published>2010-11-19T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;John Gruber of Daring Fireball has a cool post on &lt;a href=&quot;http://daringfireball.net/2010/11/masquerading_as_mobile_safari&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tricking websites to display HTML5 video&lt;/a&gt; when they say they can only play Flash. Many sites will tell you they require Flash, even when they actually support &lt;a href=&quot;http://videojs.com/html5-video/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 video&lt;/a&gt; for iOS devices.&lt;/p&gt;
&lt;p&gt;To add to Gruber&amp;rsquo;s post, there&amp;rsquo;s two reasons a site might do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They&amp;rsquo;re trying to protect their content from being easily downloaded, which HTML5 video can&amp;rsquo;t do very well yet.&lt;/li&gt;
&lt;li&gt;They assume everyone with a browser has Flash, and just serve HTML5 video to iOS devices.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So for this first, this is actually a hack to download content some publishers might not want you to. I probably shouldn&amp;rsquo;t be publishing this since security of the content is one of the main reasons HTML5 video will still take time to spread. But for that purpose, it&amp;rsquo;s really not hard to figure out.&lt;/p&gt;
&lt;p&gt;For the second, it&amp;rsquo;s kind of lazy implementation of fallbacks. It&amp;rsquo;s pretty easy to check if Flash is supported, and if not, fall back to HTML5, instead of checking for a specific user agent string. So for sites using VideoJS, this method wouldn&amp;rsquo;t work, but there also wouldn&amp;rsquo;t be a need because VideoJS would fallback appropriately to HTML5.&lt;/p&gt;
&lt;p&gt;Gruber has disabled Flash in Safari for better performance with video. That says a lot. Most people probably won&amp;rsquo;t go to same effort he has, but I know he&amp;rsquo;s not the only one.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;John Gruber of Daring Fireball has a cool post on &lt;a href=&quot;http://daringfireball.net/2010/11/masquerading_as_mobile_safari&quot; target=&quot;_blan
    
    </summary>
    
    
      <category term="code" scheme="https://videojs.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>1.1.5 Release - Subtitles using track, Android fix &amp; more</title>
    <link href="https://videojs.github.io/blog/1-1-5-Release-Subtitles-using-track-Android-fix-more/"/>
    <id>https://videojs.github.io/blog/1-1-5-Release-Subtitles-using-track-Android-fix-more/</id>
    <published>2010-11-09T05:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;Feature: Switched to track method for setting subtitles. Now works like spec.&lt;/li&gt;
&lt;li&gt;Feature: Created &amp;ldquo;players&amp;rdquo; concept for defining fallbacks and fallback order&lt;/li&gt;
&lt;li&gt;Fix: Android playback bug.&lt;/li&gt;
&lt;li&gt;Fix: Massive reorganization of code to make easier to navigate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve switched the subtitles to use the new track element defined in the &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 spec&lt;/a&gt;. You can now add subtitles by creating a track element pointing to your &lt;a href=&quot;http://www.delphiki.com/websrt/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebSRT&lt;/a&gt;subtitles source.&lt;/p&gt;
&lt;pre&gt;&amp;lt;video ...&amp;gt;
  &amp;lt;track kind=&quot;subtitles&quot; src=&quot;../demo-subtitles.srt&quot; srclang=&quot;en-US&quot; label=&quot;English&quot;&amp;gt;&amp;lt;/track&amp;gt;
&amp;lt;/vide&amp;gt;&lt;/pre&gt;

&lt;p&gt;The closing track tag is needed, otherwise Safari thinks everything else is a child of the track, even with a self-closing track tag. Not sure why that is, but it&amp;rsquo;s kind of annoying.&lt;/p&gt;
&lt;p&gt;Also a fix for Android playback was added. Android HTML5 video is pretty rough. The canPlayType function returns nothing on Android so VideoJS has a check to see if the source is mp4/m4v, and assumes it&amp;rsquo;ll play. Then VideoJS adds a click event to the video so it&amp;rsquo;ll play when you touch it. Also the Android will show the poster image, but no indication that it&amp;rsquo;s a video and not just an image. Hopefully this will be improved in the next Android version.&lt;/p&gt;
&lt;p&gt;Beyond that, I did a massive reorganization of the code, so it should be easier to navigate if you&amp;rsquo;re planning to hack at it or contribute.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://videojs.com/downloads/video-js-1.1.5.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download version 1.1.5&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Feature: Switched to track method for setting subtitles. Now works like spec.&lt;/li&gt;
&lt;li&gt;Feature: Created &amp;ldquo;players&amp;rdquo; conce
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Version 1.1.4 Release - CSS Loading Spinner &amp; More</title>
    <link href="https://videojs.github.io/blog/Version-1-1-4-Release-CSS-Loading-Spinner-More/"/>
    <id>https://videojs.github.io/blog/Version-1-1-4-Release-CSS-Loading-Spinner-More/</id>
    <published>2010-11-06T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;The most notable update in this version is a loading indicator (spinner), for when the video is buffering or seeking. The spinner works pretty well, however it&amp;rsquo;s limited by how accurately each browser tells us what it&amp;rsquo;s currently doing through triggered events. The spinner works best in Firefox so far. Safari/Chrome are less consistent with what events are triggered and when. For this reason I&amp;rsquo;m using a more careful approach that makes sure the spinner gets hidden, as opposed to making sure the spinner always shows when the player is busy. There&amp;rsquo;s a few bugs I had to account for too, like when Safari throws a &amp;ldquo;waiting&amp;rdquo; event, but then no other event to let us know it&amp;rsquo;s not waiting anymore.&lt;/p&gt;
&lt;p&gt;The spinner icon is made with CSS3 effects (border-radius and transform). The spinning animation is created with a little javascript for now. In webkit browsers the animation could have been done with CSS3 animation, but I&amp;rsquo;d rather keep it consistent between browsers. The technique comes from &lt;a href=&quot;http://kilianvalkhof.com/2010/css-xhtml/css3-loading-spinners-without-images/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kilian Valkhof&lt;/a&gt; with initial integration into VideoJS by &lt;a href=&quot;http://twitter.com/#!/dz0ny&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Janez Troha&lt;/a&gt; (&lt;a href=&quot;https://github.com/dz0ny&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dz0ny&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Other features and fixes include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: Added loading spinner.&lt;/li&gt;
&lt;li&gt;Feature: Improved styles loaded checking.&lt;/li&gt;
&lt;li&gt;Feature: Added volume() function to get and set volume through the player. - Fix: Fix issue where FF would loop video in background when ended.&lt;/li&gt;
&lt;li&gt;Fix: Bug in Chrome that shows poster &amp;amp; plays audio if you set currentTime too quickly.&lt;/li&gt;
&lt;li&gt;Fix: Bug in Safari where waiting is triggered and shows spinner when not needed&lt;/li&gt;
&lt;li&gt;Fix: Updated to show links if only unplayable sources and no Flash.&lt;/li&gt;
&lt;li&gt;Fix: Issue where if play button was loaded after play, it wouldn&amp;rsquo;t hide.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://videojs.com/downloads/video-js-1.1.4.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download version 1.1.4&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The most notable update in this version is a loading indicator (spinner), for when the video is buffering or seeking. The spinner works p
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Version 1.1.3 Release</title>
    <link href="https://videojs.github.io/blog/Version-1-1-3-Release/"/>
    <id>https://videojs.github.io/blog/Version-1-1-3-Release/</id>
    <published>2010-10-19T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Version 1.1.3 of VideoJS is now available.&lt;/p&gt;
&lt;p&gt;Probably the most notable change is a switch to using a big play button before the movie plays for the first time, as opposed to showing the control bar. The main reason for doing this is actually a bug in Safari. If you try to call any functions on the video other than play, before the video has loaded, Safari will error out. Some people mentioned that fullscreen mode did not work in Safari for them, and this is most likely what was happening for them. This would only happen if you were not preloading the video. You can still go back to showing the controls first through the showControlsAtStart option, but it&amp;rsquo;s not recommended.&lt;/p&gt;
&lt;p&gt;Other features and fixes include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: Width/Height functions for resizing the player&lt;/li&gt;
&lt;li&gt;Feature: Made initial click &amp;amp; hold trigger new value on progress and volume&lt;/li&gt;
&lt;li&gt;Feature: Made controls not hide when hovering over them&lt;/li&gt;
&lt;li&gt;Fix: Removed trailing comma that was breaking IE7&lt;/li&gt;
&lt;li&gt;Fix: Removed some vars from global scope&lt;/li&gt;
&lt;li&gt;Fix: Changed a document.onmousemove to an eventListener to prevent conflicts&lt;/li&gt;
&lt;li&gt;Fix: Added a unique ID to FlowPlayer demo object to fix a FlowPlayer bug. Thanks @emirpprime.&lt;/li&gt;
&lt;li&gt;Fix: Safari error on unloaded video&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you have any questions.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Version 1.1.3 of VideoJS is now available.&lt;/p&gt;
&lt;p&gt;Probably the most notable change is a switch to using a big play button before the movi
    
    </summary>
    
    
      <category term="version" scheme="https://videojs.github.io/blog/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Facebook Adds HTML5 Video</title>
    <link href="https://videojs.github.io/blog/Facebook-Adds-HTML5-Video/"/>
    <id>https://videojs.github.io/blog/Facebook-Adds-HTML5-Video/</id>
    <published>2010-10-12T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/24374884@N08/4603715307/&quot; title=&quot;What&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://farm2.static.flickr.com/1199/4603715307_c878c8a77b_m.jpg&quot; alt=&quot;What&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Among other new HTML5 features, Facebook has an HTML5 video player for playback on the iPhone and iPad. They say that on other mobile browsers, Flash outperformed the HTML5 implementation. That&amp;rsquo;s a little discouraging to hear, but HTML5 video is still young.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.facebook.com/notes/facebook-engineering/using-html5-today/438532093919&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the full post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In contrast, check out this video of HTML5 vs. Flash on a Mac. Spoiler: HTML5 wins.&lt;/p&gt;
&lt;object height=&quot;390&quot; width=&quot;640&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/IP7A09ty1do&amp;amp;hl=en_US&amp;amp;feature=player_embedded&amp;amp;version=3&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;&gt;&lt;/object&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/24374884@N08/4603715307/&quot; title=&quot;What&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://farm2.static
    
    </summary>
    
    
      <category term="news" scheme="https://videojs.github.io/blog/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>iPad &amp; iPhone Video Poster Fix (bonus Javascript Placement Fix)</title>
    <link href="https://videojs.github.io/blog/iPad-iPhone-Video-Poster-Fix-bonus-Javascript-Placement-Fix/"/>
    <id>https://videojs.github.io/blog/iPad-iPhone-Video-Poster-Fix-bonus-Javascript-Placement-Fix/</id>
    <published>2010-09-20T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Bug-1-Poster-Attribute&quot;&gt;&lt;a href=&quot;/blog/iPad-iPhone-Video-Poster-Fix-bonus-Javascript-Placement-Fix/#Bug-1-Poster-Attribute&quot; class=&quot;headerlink&quot; title=&quot;Bug #1 - Poster Attribute&quot;&gt;&lt;/a&gt;Bug #1 - Poster Attribute&lt;/h3&gt;&lt;p&gt;If you include the poster attribute on the video tag when you&amp;rsquo;re using &amp;lt;source&amp;gt; tags, the video won&amp;rsquo;t work on iPads &amp;amp; iPhones using iOS 3. You&amp;rsquo;ll see a broken play button, or no play button at all. On the iPad specifically, playback in inconsistent. Sometimes it&amp;rsquo;ll work and sometimes it won&amp;rsquo;t. This is &lt;a href=&quot;http://camendesign.com/code/video_for_everybody#notes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documented on the Video for Everybody site&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Bug-2-Javascript-in-the-Head&quot;&gt;&lt;a href=&quot;/blog/iPad-iPhone-Video-Poster-Fix-bonus-Javascript-Placement-Fix/#Bug-2-Javascript-in-the-Head&quot; class=&quot;headerlink&quot; title=&quot;Bug #2 - Javascript in the Head&quot;&gt;&lt;/a&gt;Bug #2 - Javascript in the Head&lt;/h3&gt;&lt;p&gt;This is a fun one&amp;hellip; If you include Javascript in the head of your page, it&amp;rsquo;ll break playback on the iPad (also inconsistent). If you move the Javascript to the bottom of the page, and still include a stylesheet, the iPad will work, but the iPhone 3 won&amp;rsquo;t. I first read about this in a &lt;a href=&quot;http://blog.noinc.com/2010/05/13/html5-video-tag-iphone-ipad-ihaveheadache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;post on the No.inc blog&lt;/a&gt;, and then ran into it myself when redesigning the VideoJS site. Their original solution was to put the JS at the bottom of the page for iPads only (fun).&lt;/p&gt;
&lt;p&gt;Apple&amp;rsquo;s iOS4 seems to fix both of these problems on the iPhone, but until iOS4 is available on the iPad, and everyone in the world upgrades their devices, we have to deal with this.&lt;/p&gt;
&lt;h3 id=&quot;Fix-for-iOS-3&quot;&gt;&lt;a href=&quot;/blog/iPad-iPhone-Video-Poster-Fix-bonus-Javascript-Placement-Fix/#Fix-for-iOS-3&quot; class=&quot;headerlink&quot; title=&quot;Fix for iOS 3&quot;&gt;&lt;/a&gt;Fix for iOS 3&lt;/h3&gt;&lt;p&gt;The problem seems to be some kind of race condition, that trips up the devices. The solution that has fixed both of these for me is to add the playable source directly to the video tag, and tell the video to load (all through Javascript).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve added all this to VideoJS 1.1.2, but here&amp;rsquo;s the basics of how it works.&lt;/p&gt;
&lt;pre&gt;var video = document.getElementById(&quot;your_video&quot;);
    var children = video.children;
    for (var i=0,j=children.length; i&amp;lt;j; i++) {
      if (children[i].tagName.toUpperCase() == &quot;SOURCE&quot;) {
        var canPlay = video.canPlayType(children[i].type);
        if(canPlay == &quot;probably&quot; || canPlay == &quot;maybe&quot;) {
          video.src = children[i].src;
          video.load();
          break; // or return or whatever
        }
      }
    }&lt;/pre&gt;

&lt;p&gt;So loop through the source elements, find the one that&amp;rsquo;s compatible, and add that source to the video src. Then trigger the video&amp;rsquo;s load() function.&lt;/p&gt;
&lt;p&gt;That seems to fix both issues. &lt;strong&gt;This will not make the poster show up in either device.&lt;/strong&gt;It just makes makes the video playable. Sometimes you&amp;rsquo;ll see it flash the controls and then go back to the big play button.&lt;/p&gt;
&lt;p&gt;Any feedback is appreciated.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go Apple, get iOS4 out to everybody!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Bug-1-Poster-Attribute&quot;&gt;&lt;a href=&quot;/blog/iPad-iPhone-Video-Poster-Fix-bonus-Javascript-Placement-Fix/#Bug-1-Poster-Attribute&quot; class=&quot;h
    
    </summary>
    
    
      <category term="code" scheme="https://videojs.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>New VideoJS Site (Now with more HTML5)!</title>
    <link href="https://videojs.github.io/blog/New-VideoJS-Site-Now-with-more-HTML5/"/>
    <id>https://videojs.github.io/blog/New-VideoJS-Site-Now-with-more-HTML5/</id>
    <published>2010-09-15T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;I told myself when the site reached 100,000 visits I would redesign it. Well that number&amp;rsquo;s come and gone, so &lt;a href=&quot;http://videojs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here it is&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also took this as an opportunity to code an HTML5 based site, using tags like &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;section&lt;/code&gt;. And I built it on the newly popular &lt;a href=&quot;http://html5boilerplate.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 Boilerplate&lt;/a&gt;. Actually I built a &lt;a href=&quot;http://github.com/zencoder/html5-boilerplate-for-wordpress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WordPress them for HTML5 Boilerplate&lt;/a&gt;first, in case you&amp;rsquo;re interested in doing the same.&lt;/p&gt;
&lt;p&gt;I got to use some fun CSS tricks throughout as well. One of them is the thin color bar at the top of the page. Resize the window and watch it go!&lt;/p&gt;
&lt;p&gt;I also added this blog and a &lt;a href=&quot;http://twitter.com/videojs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;twitter account&lt;/a&gt;, where I&amp;rsquo;ll be posting updates to VideoJS, as well as general HTML5 video news.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I told myself when the site reached 100,000 visits I would redesign it. Well that number&amp;rsquo;s come and gone, so &lt;a href=&quot;http://videoj
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VideoJS is IE9 Compatible</title>
    <link href="https://videojs.github.io/blog/VideoJS-is-IE9-Compatible/"/>
    <id>https://videojs.github.io/blog/VideoJS-is-IE9-Compatible/</id>
    <published>2010-09-15T04:00:00.000Z</published>
    <updated>2016-06-30T19:25:15.000Z</updated>
    
    <content type="html">&lt;p&gt;After an initial test, VideoJS works with the new &lt;a href=&quot;http://ie.microsoft.com/testdrive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Internet Explorer 9 preview&lt;/a&gt;. Great news, and a little surprising considering the CSS layout of the controls, and the general nature of IE. Other VideoJS site layout stuff seems to break, but for now as long as the player works I&amp;rsquo;m happy.&lt;/p&gt;
&lt;p&gt;If you find differently let me know (along with any info that might be helpful).&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;After an initial test, VideoJS works with the new &lt;a href=&quot;http://ie.microsoft.com/testdrive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Internet Ex
    
    </summary>
    
    
  </entry>
  
</feed>
